{:namespaces
 ({:source-url nil,
   :wiki-url "seesaw.action-api.html",
   :name "seesaw.action",
   :author "Dave Ray",
   :doc
   "Functions for dealing with Swing Actions. Prefer (seesaw.core/action)."}
  {:source-url nil,
   :wiki-url "seesaw.applet-api.html",
   :name "seesaw.applet",
   :author "Dave Ray",
   :doc
   "Macros and functions that make creating an applet with Seesaw a\nlittle less painful."}
  {:source-url nil,
   :wiki-url "seesaw.behave-api.html",
   :name "seesaw.behave",
   :author "Dave Ray",
   :doc
   "A collection of basic behaviors that can be dynamically added to\nwidgets. Most cover basic functionality that's missing from Swing\nor just a pain to implement."}
  {:source-url nil,
   :wiki-url "seesaw.bind-api.html",
   :name "seesaw.bind",
   :author "Dave Ray",
   :doc
   "Functions for binding the value of one thing to another, for example\nsynchronizing an atom with changes to a slider."}
  {:source-url nil,
   :wiki-url "seesaw.border-api.html",
   :name "seesaw.border",
   :author "Dave Ray",
   :doc "Functions for creating widget borders."}
  {:source-url nil,
   :wiki-url "seesaw.cells-api.html",
   :name "seesaw.cells",
   :author "Dave Ray",
   :doc
   "Functions for implementing custom cell renderers. Note that on\nmany core functions (listbox, tree, combobox, etc) a render function\ncan be given directly to the :renderer option."}
  {:source-url nil,
   :wiki-url "seesaw.chooser-api.html",
   :name "seesaw.chooser",
   :author "Dave Ray",
   :doc "File chooser and other common dialogs."}
  {:source-url nil,
   :wiki-url "seesaw.color-api.html",
   :name "seesaw.color",
   :author "Dave Ray",
   :doc
   "Functions for creating Swing colors. Note that these are implicit\nin the core color options."}
  {:source-url nil,
   :wiki-url "seesaw.config-api.html",
   :name "seesaw.config",
   :author "Dave Ray",
   :doc
   "Functions for configuring widgets. Prefer (seesaw.core/config) and friends."}
  {:source-url nil,
   :wiki-url "seesaw.core-api.html",
   :name "seesaw.core",
   :author "Dave Ray",
   :doc
   "Core functions and macros for Seesaw. Although there are many more\nSeesaw namespaces, usually what you want is in here. Most functions\nin other namespaces have a core wrapper which adds additional\ncapability or makes them easier to use."}
  {:source-url nil,
   :wiki-url "seesaw.cursor-api.html",
   :name "seesaw.cursor",
   :author "Dave Ray",
   :doc "Functions for creating Swing cursors."}
  {:source-url nil,
   :wiki-url "seesaw.dev-api.html",
   :name "seesaw.dev",
   :author "Dave Ray",
   :doc "Functions to aid development of Seesaw apps."}
  {:source-url nil,
   :wiki-url "seesaw.dnd-api.html",
   :name "seesaw.dnd",
   :author "Dave Ray",
   :doc "Functions for dealing with drag and drop and data transfer."}
  {:source-url nil,
   :wiki-url "seesaw.dnd-explorer-api.html",
   :name "seesaw.dnd-explorer",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.event-api.html",
   :name "seesaw.event",
   :author "Dave Ray",
   :doc
   "Functions for handling events. Do not use these functions directly.\nUse (seesaw.core/listen) instead."}
  {:source-url nil,
   :wiki-url "seesaw.font-api.html",
   :name "seesaw.font",
   :author "Dave Ray",
   :doc
   "Functions for handling fonts. Note that most core widget functions\nuse these implicitly through the :font option."}
  {:source-url nil,
   :wiki-url "seesaw.forms-api.html",
   :name "seesaw.forms",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.graphics-api.html",
   :name "seesaw.graphics",
   :author "Dave Ray",
   :doc "Basic graphics functions to simplify use of Graphics2D."}
  {:source-url nil,
   :wiki-url "seesaw.icon-api.html",
   :name "seesaw.icon",
   :author "Dave Ray",
   :doc "Functions for loading and creating icons."}
  {:source-url nil,
   :wiki-url "seesaw.invoke-api.html",
   :name "seesaw.invoke",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.keymap-api.html",
   :name "seesaw.keymap",
   :author "Dave Ray",
   :doc "Functions for mapping key strokes to actions."}
  {:source-url nil,
   :wiki-url "seesaw.keystroke-api.html",
   :name "seesaw.keystroke",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.layout-api.html",
   :name "seesaw.layout",
   :author "Dave Ray",
   :doc
   "Functions for dealing with layouts. Prefer layout specific constructors in seesaw.core, e.g. border-panel."}
  {:source-url nil,
   :wiki-url "seesaw.make-widget-api.html",
   :name "seesaw.make-widget",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.meta-api.html",
   :name "seesaw.meta",
   :author "Dave Ray",
   :doc
   "Functions for associating metadata with frames and widgets, etc."}
  {:source-url nil,
   :wiki-url "seesaw.mig-api.html",
   :name "seesaw.mig",
   :author "Dave Ray",
   :doc "MigLayout support for Seesaw"}
  {:source-url nil,
   :wiki-url "seesaw.mouse-api.html",
   :name "seesaw.mouse",
   :author "Dave Ray",
   :doc "Functions for dealing with the mouse."}
  {:source-url nil,
   :wiki-url "seesaw.options-api.html",
   :name "seesaw.options",
   :author "Dave Ray",
   :doc "Functions for dealing with options."}
  {:source-url nil,
   :wiki-url "seesaw.pref-api.html",
   :name "seesaw.pref",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.scroll-api.html",
   :name "seesaw.scroll",
   :author "Dave Ray",
   :doc
   "Functions for dealing with scrolling. Prefer (seesaw.core/scroll!)."}
  {:source-url nil,
   :wiki-url "seesaw.selection-api.html",
   :name "seesaw.selection",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.selector-api.html",
   :name "seesaw.selector",
   :doc
   "Seesaw selector support, based largely upon enlive-html.\nhttps://github.com/cgrand/enlive\n\nThere's no need to ever directly require this namespace. Use (seesaw.core/select)!"}
  {:source-url nil,
   :wiki-url "seesaw.style-api.html",
   :name "seesaw.style",
   :author "Dave Ray",
   :doc
   "Functions for styling apps. Prefer (seesaw.core/stylesheet) and friends."}
  {:source-url nil,
   :wiki-url "seesaw.swingx-api.html",
   :name "seesaw.swingx",
   :author "Dave Ray",
   :doc
   "SwingX integration. Unfortunately, SwingX is hosted on java.net which means\nit looks abandoned most of the time. Downloads are here\nhttp://java.net/downloads/swingx/releases/1.6/\n\nThis is an incomplete wrapper. If something's missing that you want, just ask."}
  {:source-url nil,
   :wiki-url "seesaw.table-api.html",
   :name "seesaw.table",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.timer-api.html",
   :name "seesaw.timer",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.to-widget-api.html",
   :name "seesaw.to-widget",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.tree-api.html",
   :name "seesaw.tree",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.util-api.html",
   :name "seesaw.util",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.value-api.html",
   :name "seesaw.value",
   :author "Dave Ray",
   :doc
   "Functions for dealing with widget value. Prefer (seesaw.core/value)."}
  {:source-url nil,
   :wiki-url "seesaw.widget-options-api.html",
   :name "seesaw.widget-options",
   :author "Dave Ray",
   :doc "Functions and protocol for dealing with widget options."}
  {:source-url nil,
   :wiki-url "seesaw.widgets.log-window-api.html",
   :name "seesaw.widgets.log-window",
   :doc nil}
  {:source-url nil,
   :wiki-url "seesaw.widgets.rounded-label-api.html",
   :name "seesaw.widgets.rounded-label",
   :author "Dave Ray",
   :doc
   "Function to create a label with a rounded border and background."}),
 :vars
 ({:arglists ([& opts]),
   :name "action",
   :namespace "seesaw.action",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.action-api.html#seesaw.action/action",
   :doc
   "Construct a new Action object. Supports the following properties:\n\n  :enabled?  Whether the action is enabled\n  :selected? Whether the action is selected (for use with radio buttons, \n             toggle buttons, etc.\n  :name      The name of the action, i.e. the text that will be displayed\n             in whatever widget it's associated with\n  :command   The action command key. An arbitrary string identifier associated\n             with the action.\n  :tip       The action's tooltip\n  :icon      The action's icon. See (seesaw.core/icon)\n  :key       A keystroke associated with the action. See (seesaw.keystroke/keystroke).\n  :mnemonic  The mnemonic for the button, either a character or a keycode.\n              Usually allows the user to activate the button with alt-mnemonic.\n              See (seesaw.util/to-mnemonic-keycode).\n  :handler   A single-argument function that performs whatever operations are\n             associated with the action. The argument is a ActionEvent instance.\n\nInstances of action can be passed to the :action option of most buttons, menu items,\netc.\n\nActions can be later configured with the same properties above with (seesaw.core/config!).\n\nReturns an instance of javax.swing.Action.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/Action.html\n",
   :var-type "function",
   :line 58,
   :file "src/seesaw/action.clj"}
  {:arglists
   ([&
     {:keys [name init start stop content],
      :or
      {init '(fn [applet]),
       start '(fn [applet]),
       stop '(fn [applet]),
       content
       '(fn [applet] (seesaw.core/label "A Seesaw Applet"))}}]),
   :name "defapplet",
   :namespace "seesaw.applet",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.applet-api.html#seesaw.applet/defapplet",
   :doc
   "Define an applet. This macro does all the gen-class business and takes maps\n applet lifetime methods to callback functions automatically. Supports the\n following options:\n \n   :name    The name of the generated class. Defaults to the current namespace.\n\n   :init    Function called when the applet is first loaded. Takes a single\n            JApplet argument. This function is called from the UI thread.\n\n   :start   Function called when the applet is started. Takes a single JApplet\n            argument. This function is called from the UI thread.\n\n   :stop    Function called when the applet is stopped. Takes a single JApplet\n            argument. This function is called from the UI thread.\n\n   :content Function called after :init which should return the content of\n            the applet, for example some kind of panel. It's added to the center\n            of a border pane so it will be resized with the applet.\n\n Note that the namespace containing a call to (defapplet) must be compiled. In\n Leiningen, this is easiest to do by adding an :aot option to project.clj:\n\n   :aot [namespace.with.defapplet]\n\n After that, use \"lein uberjar\" to build a jar with everything.\n\n Since Seesaw is currently reflection heavy, the resulting jar must be signed:\n\n   $ keytool -genkey -alias seesaw -dname \"cn=company, c=en\"\n   $ keytool -selfcert -alias seesaw -dname \"cn=company, c=en\"\n   $ lein uberjar\n   $ jarsigner name-of-project-X.X.X-SNAPSHOT-standalone.jar seesaw\n\n Then refer to it from your webpage like this:\n\n   <applet archive=\"name-of-project-X.X.X-standalone.jar\" \n           code=\"namespace/with/defapplet.class\" \n           width=\"200\" \n           height=\"200\">\n\n Examples:\n\n   See examples/applet project.\n\n See:\n   http://download.oracle.com/javase/7/docs/api/javax/swing/JApplet.html\n   http://download.oracle.com/javase/tutorial/uiswing/components/applet.html\n   http://download.oracle.com/javase/tutorial/deployment/applet/index.html\n ",
   :var-type "macro",
   :line 18,
   :file "src/seesaw/applet.clj"}
  {:arglists ([w]),
   :name "when-focused-select-all",
   :namespace "seesaw.behave",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.behave-api.html#seesaw.behave/when-focused-select-all",
   :doc
   "A helper function which adds a \"select all when focus gained\" behavior to one\nor more text widgets or editable comboboxes.\n\nLike (seesaw.core/listen) returns a function which will remove all event handlers\nwhen called.\n\nExamples:\n\n  (flow-panel :items [\n    \"Enter some text here: \"\n    (doto\n       (text \"All this text will be selected when I get keyboard focus\")\n       when-focused-select-all)])\n\nSee:\n",
   :var-type "function",
   :line 19,
   :file "src/seesaw/behave.clj"}
  {:arglists ([w & opts]),
   :name "when-mouse-dragged",
   :namespace "seesaw.behave",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.behave-api.html#seesaw.behave/when-mouse-dragged",
   :doc
   "A helper for handling mouse dragging on a widget. This isn't that complicated,\nbut the default mouse dragged event provided with Swing doesn't give the delta\nsince the last drag event so you end up having to keep track of it. This function\ntakes three options:\n\n  :start event handler called when the drag is started (mouse pressed).\n  :drag  A function that takes a mouse event and a [dx dy] vector which is\n         the change in x and y since the last drag event.\n  :finish event handler called when the drag is finished (mouse released).\n\nLike (seesaw.core/listen) returns a function which will remove all event handlers\nwhen called.\n\nExamples:\n  See (seesaw.examples.xyz-panel)\n",
   :var-type "function",
   :line 45,
   :file "src/seesaw/behave.clj"}
  {:arglists ([bindings & body]),
   :name "b-do",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/b-do",
   :doc
   "Macro helper for (seesaw.bind/b-do*). Takes a single-argument fn-style\nbinding vector and a body. When a new value is received it is passed\nto the binding and the body is executes. The result is discarded.\n\nSee:\n  (seesaw.bind/b-do*)\n",
   :var-type "macro",
   :line 389,
   :file "src/seesaw/bind.clj"}
  {:arglists ([f & args]),
   :name "b-do*",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/b-do*",
   :doc
   "Creates a bindable that takes an incoming value v, executes\n(f v args) and does nothing further. That is, it's the end of the binding\nchain.\n\nSee:\n  (seesaw.bind/bind)\n  (seesaw.bind/b-do)",
   :var-type "function",
   :line 374,
   :file "src/seesaw/bind.clj"}
  {:arglists ([agent f & args]),
   :name "b-send",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/b-send",
   :doc
   "Creates a bindable that (send)s to an agent using the given function each\ntime its input changes. That is, each time a new value comes in, \n(apply send agent f new-value args) is called.\n\nThis bindable's value (the current value of the atom) is subscribable.\n\nExample:\n\n  ; Accumulate list of selections in a vector\n  (bind (selection my-list) (b-send my-agent conj))\n",
   :var-type "function",
   :line 212,
   :file "src/seesaw/bind.clj"}
  {:arglists ([agent f & args]),
   :name "b-send-off",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/b-send-off",
   :doc
   "Creates a bindable that (send-off)s to an agent using the given function each\ntime its input changes. That is, each time a new value comes in, \n(apply send agent f new-value args) is called.\n\nThis bindable's value (the current value of the atom) is subscribable.\n\nExample:\n\n  ; Accumulate list of selections in a vector\n  (bind (selection my-list) (b-send-off my-agent conj))\n",
   :var-type "function",
   :line 227,
   :file "src/seesaw/bind.clj"}
  {:arglists ([atom f & args]),
   :name "b-swap!",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/b-swap!",
   :doc
   "Creates a bindable that swaps! an atom's value using the given function each\ntime its input changes. That is, each time a new value comes in, \n(apply swap! atom f new-value args) is called.\n\nThis bindable's value (the current value of the atom) is subscribable.\n\nExample:\n\n  ; Accumulate list of selections in a vector\n  (bind (selection my-list) (b-swap! my-atom conj))\n",
   :var-type "function",
   :line 185,
   :file "src/seesaw/bind.clj"}
  {:arglists ([first-source target & more]),
   :name "bind",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/bind",
   :doc
   "Chains together two or more bindables into a listening chain.\nWhen the value of source changes it is passed along and updates \nthe value of target and so on.\n\nNote that the return value of this function is itself a composite\nbindable so it can be subscribed to, or nested in other chains.\n\nThe return value, like (seesaw.bind/subscribe) and (seesaw.event/listen)\ncan also be invoked as a no-arg function to back out all the subscriptions\nmade by bind.\n\nExamples:\n\n  ; Bind the text of a text box to an atom. As the user types in\n  ; t, the value of a is updated.\n  (let [t (text)\n        a (atom nil)]\n    (bind (.getDocument t) a))\n\n  ; Bind a the value of a slider to an atom, with a transform\n  ; that forces the value to [0, 1]\n  (let [s (slider :min 0 :max 1)\n        a (atom 0.0)]\n    (bind s (transform / 100.0) a))\n\n  ; Bind the value of an atom to a label\n  (let [a   (atom \"hi\")\n        lbl (label)]\n    (bind a (transform #(.toUpperCase %)) (property lbl :text))))\n\nNotes:\n  Creating a binding does *not* automatically synchronize the values.\n\n  Circular bindings will usually work.\n",
   :var-type "function",
   :line 47,
   :file "src/seesaw/bind.clj"}
  {:arglists ([start end]),
   :name "composite",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/composite",
   :doc
   "Create a composite bindable from the start and end of a binding chain",
   :var-type "function",
   :line 40,
   :file "src/seesaw/bind.clj"}
  {:arglists ([pred]),
   :name "filter",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/filter",
   :doc
   "Executes a predicate on incoming value. If the predicate returns a truthy\nvalue, the incoming value is passed on to the next bindable in the chain. \nOtherwise, nothing is notified.\n\nExamples:\n  \n  ; Block out of range values\n  (let [input (text)\n        output (slider :min 0 :max 100)]\n    (bind \n      input \n      (filter #(< 0 % 100)) \n      output))\n\nNotes:\n  This works a lot like (clojure.core/filter)\n\nSee:\n  (seesaw.bind/some)\n  (clojure.core/filter)\n",
   :var-type "function",
   :line 400,
   :file "src/seesaw/bind.clj"}
  {:arglists ([& bindables]),
   :name "funnel",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/funnel",
   :doc
   "Create a binding chain with several input chains. Provides a\nvector of input values further along the chain.\n\nExample: Only enable a button if there is some text in both fields.\n\n  (let [t1 (text)\n        t2 (text)\n        b  (button)]\n    (bind\n      (funnel\n        (property t1 :text)\n        (property t2 :text))\n      (transform #(every? seq %))\n      (property b :enabled?)))\n",
   :var-type "function",
   :line 100,
   :file "src/seesaw/bind.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/notify",
   :namespace "seesaw.bind",
   :var-type "function",
   :arglists ([this v]),
   :doc
   "Pass a new value to this bindable. Causes all subscribed handlers\nto be called with the value.",
   :name "notify"}
  {:arglists ([]),
   :name "notify-later",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/notify-later",
   :doc
   "Creates a bindable that notifies its subscribers (next in chain) on the\nswing thread using (seesaw.invoke/invoke-later). You should use this to\nensure that things happen on the right thread, e.g. (seesaw.bind/property)\nand (seesaw.bind/selection).\n\nSee:\n  (seesaw.invoke/invoke-later)\n",
   :var-type "function",
   :line 502,
   :file "src/seesaw/bind.clj"}
  {:arglists ([]),
   :name "notify-now",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/notify-now",
   :doc
   "Creates a bindable that notifies its subscribers (next in chain) on the\nswing thread using (seesaw.invoke/invoke-now). You should use this to\nensure that things happen on the right thread, e.g. (seesaw.bind/property)\nand (seesaw.bind/selection).\n\nNote that sincel invoke-now is used, you're in danger of deadlocks. Be careful.\n\nSee:\n  (seesaw.invoke/invoke-soon)\n",
   :var-type "function",
   :line 526,
   :file "src/seesaw/bind.clj"}
  {:arglists ([]),
   :name "notify-soon",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/notify-soon",
   :doc
   "Creates a bindable that notifies its subscribers (next in chain) on the\n swing thread using (seesaw.invoke/invoke-soon). You should use this to\n ensure that things happen on the right thread, e.g. (seesaw.bind/property)\n and (seesaw.bind/selection).\n\n See:\n   (seesaw.invoke/invoke-soon)\n ",
   :var-type "function",
   :line 514,
   :file "src/seesaw/bind.clj"}
  {:arglists ([target property-name]),
   :name "property",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/property",
   :doc
   "Returns a bindable (suitable to pass to seesaw.bind/bind) that\nconnects to a property of a widget, e.g. :foreground, :enabled?,\netc.\n\nExamples:\n\n  ; Map the text in a text box to the foreground color of a label\n  ; Pass the text through Seesaw's color function first to get\n  ; a color value.\n  (let [t   (text :text \"white\")\n        lbl (label :text \"Color is shown here\" :opaque? true)]\n    (bind (.getDocument t)\n          (transform #(try (color %) (catch Exception (color 0 0 0))))\n          (property lbl :background)))\n  \nSee:\n  (seesaw.bind/bind)\n",
   :var-type "function",
   :line 263,
   :file "src/seesaw/bind.clj"}
  {:arglists ([widget options] [widget]),
   :name "selection",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/selection",
   :doc
   "Converts the selection of a widget into a bindable. Applies to listbox,\ntable, tree, combobox, checkbox, etc, etc. In short, anything to which\n(seesaw.core/selection) applies.\n\noptions corresponds to the option map passed to (seesaw.core/selection)\nand (seesaw.core/selection)\n\nExamples:\n  \n  ; Bind checkbox state to enabled state of a widget\n  (let [cb (checkbox :text \"Enable\")\n        t  (text)]\n    (bind (selection cb) (property t :enabled?)))\n\nSee:\n  (seesaw.bind/bind)\n  (seesaw.core/selection)\n  (seesaw.core/selection!)\n",
   :var-type "function",
   :line 298,
   :file "src/seesaw/bind.clj"}
  {:arglists ([pred]),
   :name "some",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/some",
   :doc
   "Executes a predicate on incoming value. If the predicate returns a truthy\nvalue, that value is passed on to the next bindable in the chain. Otherwise,\nnothing is notified.\n\nExamples:\n  \n  ; Try to convert a text string to a number. Do nothing if the conversion\n  ; Fails\n  (let [input (text)\n        output (slider :min 0 :max 100)]\n    (bind input (some #(try (Integer/parseInt %) (catch Exception nil))) output))\n\nNotes:\n  This works a lot like (clojure.core/some)\n\nSee:\n  (seesaw.bind/filter)\n  (clojure.core/some)\n",
   :var-type "function",
   :line 435,
   :file "src/seesaw/bind.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/subscribe",
   :namespace "seesaw.bind",
   :var-type "function",
   :arglists ([this handler]),
   :doc
   "Subscribes a handler to changes in this bindable.\nhandler is a single argument function that takes the\nnew value of the bindable.\nMust return a no-arg function that unsubscribes the handler\nfrom future changes.",
   :name "subscribe"}
  {:arglists ([& bindables]),
   :name "tee",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/tee",
   :doc
   "Create a tee junction in a bindable chain.\n\nExamples:\n\n  ; Take the content of a text box and show it as upper and lower\n  ; case in two labels\n  (let [t (text)\n        upper (label)\n        lower (label)]\n    (bind (property t :text) \n          (tee (bind (transform #(.toUpperCase %)) (property upper :text))\n               (bind (transform #(.toLowerCase %)) (property lower :text)))))\n\nSee:\n  (seesaw.bind/bind)\n",
   :var-type "function",
   :line 468,
   :file "src/seesaw/bind.clj"}
  {:arglists ([f & args]),
   :name "transform",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/transform",
   :doc
   "Creates a bindable that takes an incoming value v, applies\n (f v args), and passes the result on. f should be side-effect\n free.\n\n See:\n   (seesaw.bind/bind)",
   :var-type "function",
   :line 355,
   :file "src/seesaw/bind.clj"}
  {:arglists ([widget]),
   :name "value",
   :namespace "seesaw.bind",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.bind-api.html#seesaw.bind/value",
   :doc
   "Converts the value of a widget into a bindable. Applies to listbox,\ntable, tree, combobox, checkbox, etc, etc. In short, anything to which\n(seesaw.core/value) applies. This is a \"receive-only\" bindable since\nthere is no good way to detect changes in the values of composites.\n\nExamples:\n  \n  ; Map the value of an atom (a map) into the value of a panel.\n  (let [a  (atom nil)\n        p  (border-panel :north (checkbox :id :cb :text \"Enable\")\n                         :south (text :id :tb)]\n    (bind a (value p)))\n  ; ... now setting a to {:cb true :tb \"Hi\"} will check the checkbox\n  ; and change the text field to \"Hi\"\n\nSee:\n  (seesaw.bind/bind)\n  (seesaw.core/value!)\n",
   :var-type "function",
   :line 328,
   :file "src/seesaw/bind.clj"}
  {:arglists ([b] [b0 b1] [b0 b1 & more]),
   :name "compound-border",
   :namespace "seesaw.border",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.border-api.html#seesaw.border/compound-border",
   :doc
   "Create a compount border from the given arguments. Order is from inner to outer.\nEach argument is passed through (seesaw.border/to-border).\n\nExamples:\n  \n    ; Create an 4 pixel empty border, red line border, and title border.\n    (compound-border 4 (line-border :color :red :thickness 4) \"Title\")\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/BorderFactory.html\n",
   :var-type "function",
   :line 73,
   :file "src/seesaw/border.clj"}
  {:arglists ([& args]),
   :name "custom-border",
   :namespace "seesaw.border",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.border-api.html#seesaw.border/custom-border",
   :doc
   "Define a custom border with the following properties:\n \n   :paint A function that takes the same arguments as Border.paintBorder:\n            java.awt.Component c - The target component\n             java.awt.Graphics g - The graphics context to draw to\n                           int x - x position of border\n                           int y - y position of border\n                           int w - width of border\n                           int h - height of border\n\n   :insets Returns the insets of the border. Can be a zero-arg function that\n             returns something that is passed through (seesaw.util/to-insets)\n             or a constant value passed through the same. Defaults to 0.\n\n   :opaque? Whether the border is opaque. A constant truthy value or a zero-arg\n            function that returns a truthy value.\n\n See:\n   http://download.oracle.com/javase/6/docs/api/javax/swing/border/Border.html\n   (seesaw.util/to-insets)\n ",
   :var-type "function",
   :line 89,
   :file "src/seesaw/border.clj"}
  {:arglists ([& {:keys [thickness top left bottom right]}]),
   :name "empty-border",
   :namespace "seesaw.border",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.border-api.html#seesaw.border/empty-border",
   :doc
   "Create an empty border. The following properties are supported:\n\n  :thickness The thickness of the border (all sides) in pixels. This property\n             is only used if :top, :bottom, etc are omitted. Defaults to 1.\n\n  :top       Thickness of the top border in pixels. Defaults to 0.\n  :left      Thickness of the left border in pixels. Defaluts to 0.\n  :bottom    Thickness of the bottom border in pixels. Defaluts to 0.\n  :right     Thickness of the right border in pixels. Defaluts to 0.\n\nExamples:\n\n    ; Create an empty 10 pixel border\n    (empty-border :thickness 10)\n\n    ; Create an empty border 5 pixels on top and left, 0 on other sides\n    (empty-border :left 5 :top 5)\n",
   :var-type "function",
   :line 25,
   :file "src/seesaw/border.clj"}
  {:arglists
   ([&
     {:keys [color thickness top left bottom right],
      :or {thickness 1, color Color/BLACK}}]),
   :name "line-border",
   :namespace "seesaw.border",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.border-api.html#seesaw.border/line-border",
   :doc
   "Create a colored border with following properties:\n \n   :color The color, passed through (seesaw.color/to-color). Defaults to black.\n   :thickness The thickness of the border in pixels. This property is only used\n              if :top, :bottom, etc are omitted. Defaults to 1.\n   :top       Thickness of the top border in pixels. Defaults to 0.\n   :left      Thickness of the left border in pixels. Defaluts to 0.\n   :bottom    Thickness of the bottom border in pixels. Defaluts to 0.\n   :right     Thickness of the right border in pixels. Defaluts to 0.\n\n Examples: \n   \n     ; Create a green border, 3 pixels on top, 5 pixels on the botttom\n     (line-border :color \"#0f0\" :top 3 :bottom 5)\n ",
   :var-type "function",
   :line 50,
   :file "src/seesaw/border.clj"}
  {:arglists ([b] [b & args]),
   :name "to-border",
   :namespace "seesaw.border",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.border-api.html#seesaw.border/to-border",
   :doc
   "Construct a border. The border returned depends on the input:\n\n  nil - returns nil\n  a Border - returns b\n  a number - returns an empty border with the given thickness\n  a vector or list - returns a compound border by applying to-border\n                     to each element, inner to outer.\n  a i18n keyword   - returns a titled border using the given resource\n  a string         - returns a titled border using the given stirng\n\nIf given more than one argument, a compound border is created by applying\nto-border to each argument, inner to outer.\n\n\nNote:\n\nto-border is used implicitly by the :border option supported by all widgets\nto it is rarely necessary to call directly.\n",
   :var-type "function",
   :line 127,
   :file "src/seesaw/border.clj"}
  {:arglists ([& args]),
   :name "choose-color",
   :namespace "seesaw.chooser",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.chooser-api.html#seesaw.chooser/choose-color",
   :doc
   "Choose a color with a color chooser dialog. The optional first argument is the\nparent component for the dialog. The rest of the args is a list of key/value \npairs:\n\n        :color The initial selected color (see seesaw.color/to-color)\n        :title The dialog's title\n\nReturns the selected color or nil if canceled.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JColorChooser.html\n",
   :var-type "function",
   :line 175,
   :file "src/seesaw/chooser.clj"}
  {:arglists ([& args]),
   :name "choose-file",
   :namespace "seesaw.chooser",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.chooser-api.html#seesaw.chooser/choose-file",
   :doc
   "Choose a file to open or save. The arguments can take two forms. First, with\nan initial parent component which will act as the parent of the dialog.\n\n    (choose-file dialog-parent ... options ...)\n\nIf the first arg is omitted, the desktop is used as the parent of the dialog:\n\n    (choose-file ... options ...)\n\nOptions can be one of:\n\n  :type The dialog type: :open, :save, or a custom string placed on the Ok button.\n        Defaults to :open.\n  :dir  The initial working directory. If omitted, the previous directory chosen\n        is remembered and used.\n  :multi?  If true, multi-selection is enabled and a seq of files is returned.\n  :selection-mode The file selection mode: :files-only, :dirs-only and :files-and-dirs.\n                  Defaults to :files-only\n  :filters A seq of either:\n             \n             A seq that contains a filter name and a seq of\n             extensions as strings for that filter.\n             \n             A seq that contains a filter name and a function \n             to be used as accept function. (see file-filter)\n\n             A FileFilter. (see file-filter)\n\n  :remember-directory? Flag specifying whether to remember the directory for future\n                       file-input invocations in case of successful exit. Default: true.\n  :success-fn  Function which will be called with the JFileChooser and the File which\n               has been selected by the user. Its result will be returned.\n               Default: return selected File. In the case of MULTI-SELECT? being true,\n               a seq of File instances will be passed instead of a single File.\n  :cancel-fn   Function which will be called with the JFileChooser on user abort of the dialog.\n               Its result will be returned. Default: returns nil.\n\nExamples:\n\n  ; ask & return single file\n  (choose-file)\n\n  ; ask & return including a filter for image files\n  (choose-file :filters [[\"Images\" [\"png\" \"jpeg\"]\n                         [\"Folders\" #(.isDirectory %)]\n                         (file-filter \"All files\" (constantly true))]])\n\n  ; ask & return absolute file path as string\n  (choose-file :success-fn (fn [fc file] (.getAbsolutePath file)))\n\nReturns result of SUCCESS-FN (default: either java.io.File or seq of java.io.File iff multi? set to true)\nin case of the user selecting a file, or result of CANCEL-FN otherwise.\n\nSee http://download.oracle.com/javase/6/docs/api/javax/swing/JFileChooser.html\n",
   :var-type "function",
   :line 100,
   :file "src/seesaw/chooser.clj"}
  {:arglists ([description accept]),
   :name "file-filter",
   :namespace "seesaw.chooser",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.chooser-api.html#seesaw.chooser/file-filter",
   :doc
   "Create a FileFilter.\n\nArguments:\n\n  description - description of this filter, will show up in the\n                filter-selection box when opening a file choosing dialog.\n\n  accept - a function taking a java.awt.File\n           returning true if the file should be shown,\n           false otherwise.\n",
   :var-type "function",
   :line 21,
   :file "src/seesaw/chooser.clj"}
  {:arglists ([s] [s a] [r g b a] [r g b]),
   :name "color",
   :namespace "seesaw.color",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.color-api.html#seesaw.color/color",
   :doc
   "Create a java.awt.Color object from args.\n\nExamples:\n\n  ; Named color with string or keyword\n  (color \"springgreen\")\n  (color :aliceblue)\n\n  ; CSS-style hex color\n  (color \"#ff0000\")\n\n  ; Named color with alpha\n  (color :aliceblue 128)\n\n  ; CSS-style hex color with alpha\n  (color \"#ff0000\" 128)\n\n  ; RGB color\n  (color 255 128 128)\n\n  ; RGB color with alpha\n  (color 255 128 128 224)\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/java/awt/Color.html\n  http://www.w3.org/TR/css3-color/\n",
   :var-type "function",
   :line 180,
   :file "src/seesaw/color.clj"}
  {:arglists ([name]),
   :name "default-color",
   :namespace "seesaw.color",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.color-api.html#seesaw.color/default-color",
   :doc
   "Retrieve a default color from the UIManager.\n\nExamples:\n\n  ; Return the look and feel's label foreground color\n  (default-color \"Label.foreground\")\n\nReturns a java.awt.Color instance or nil if not found.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/UIManager.html#getColor%28java.lang.Object%29\n",
   :var-type "function",
   :line 216,
   :file "src/seesaw/color.clj"}
  {:file "src/seesaw/config.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.config-api.html#seesaw.config/Configurable",
   :namespace "seesaw.config",
   :line 16,
   :var-type "var",
   :doc
   "A protocol for configuring and querying properties of an object. Client\ncode should use (seesaw.core/config!) and (seesaw.core/config) rather than\ncalling protocol methods directly.\n\nSee:\n  (seesaw.core/config)\n  (seesaw.core/config!)\n",
   :name "Configurable"}
  {:arglists ([target name]),
   :name "config",
   :namespace "seesaw.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.config-api.html#seesaw.config/config",
   :doc
   "Retrieve the value of an option from target. For example:\n\n  (config button1 :text)\n  => \"I'm a button!\"\n\nTarget must satisfy the Configurable protocol. In general, it may be a widget, \nor convertible to widget with (to-widget). For example, the target can be an event \nobject.\n\nReturns the option value. \nThrows IllegalArgumentException if an unknown option is requested.\n\nSee:\n  (seesaw.core/config!)\n",
   :var-type "function",
   :line 28,
   :file "src/seesaw/config.clj"}
  {:arglists ([targets & args]),
   :name "config!",
   :namespace "seesaw.config",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.config-api.html#seesaw.config/config!",
   :doc
   "Applies options in the argument list to one or more targets. For example:\n\n   (config! button1 :enabled? false :text \"I' disabled\")\n\n or:\n\n   (config! [button1 button2] :enabled? false :text \"We're disabled\")\n\n Targets must satisfy the Configurable protocol. In general, they may be widgets, \n or convertible to widgets with (to-widget). For example, the target can be an event \n object.\n\n Returns the input targets.\n Throws IllegalArgumentException if an unknown option is encountered.\n\n See:\n   (seesaw.core/config)\n ",
   :var-type "function",
   :line 47,
   :file "src/seesaw/config.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.config-api.html#seesaw.config/config!*",
   :namespace "seesaw.config",
   :var-type "function",
   :arglists ([target args]),
   :doc
   "Configure one or more options on target. Args is a list of key/value pairs. See (seesaw.core/config!)",
   :name "config!*"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.config-api.html#seesaw.config/config*",
   :namespace "seesaw.config",
   :var-type "function",
   :arglists ([target name]),
   :doc
   "Retrieve the current value for the given named option. See (seesaw.core/config)",
   :name "config*"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/ConfigAction",
   :namespace "seesaw.core",
   :line 633,
   :var-type "var",
   :doc "Protocol to hook into :action option",
   :name "ConfigAction"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/ConfigIcon",
   :namespace "seesaw.core",
   :line 549,
   :var-type "var",
   :doc "Protocol to hook into :icon option",
   :name "ConfigIcon"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/ConfigModel",
   :namespace "seesaw.core",
   :line 655,
   :var-type "var",
   :doc "Protocol to hook into :model option",
   :name "ConfigModel"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/ConfigText",
   :namespace "seesaw.core",
   :line 573,
   :var-type "var",
   :doc "Protocol to hook into :text option",
   :name "ConfigText"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/SelectionModeConfig",
   :namespace "seesaw.core",
   :line 732,
   :var-type "var",
   :doc "Hook protocol for :selection-mode option",
   :name "SelectionModeConfig"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/action",
   :namespace "seesaw.core",
   :line 115,
   :var-type "var",
   :doc
   "Alias of seesaw.action/action:\nConstruct a new Action object. Supports the following properties:\n\n    :enabled?  Whether the action is enabled\n    :selected? Whether the action is selected (for use with radio buttons, \n               toggle buttons, etc.\n    :name      The name of the action, i.e. the text that will be displayed\n               in whatever widget it's associated with\n    :command   The action command key. An arbitrary string identifier associated\n               with the action.\n    :tip       The action's tooltip\n    :icon      The action's icon. See (seesaw.core/icon)\n    :key       A keystroke associated with the action. See (seesaw.keystroke/keystroke).\n    :mnemonic  The mnemonic for the button, either a character or a keycode.\n                Usually allows the user to activate the button with alt-mnemonic.\n                See (seesaw.util/to-mnemonic-keycode).\n    :handler   A single-argument function that performs whatever operations are\n               associated with the action. The argument is a ActionEvent instance.\n\n  Instances of action can be passed to the :action option of most buttons, menu items,\n  etc.\n\n  Actions can be later configured with the same properties above with (seesaw.core/config!).\n\n  Returns an instance of javax.swing.Action.\n\n  See:\n    http://download.oracle.com/javase/6/docs/api/javax/swing/Action.html\n  ",
   :name "action"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/action-option",
   :namespace "seesaw.core",
   :line 649,
   :var-type "var",
   :doc "Default handler for the :action option. Internal use.",
   :name "action-option"}
  {:arglists ([container subject & more]),
   :name "add!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/add!",
   :doc
   "Add one or more widgets to a widget container. The container and each widget\nargument are passed through (to-widget) as usual. Each widget can be a single\nwidget, or a widget/constraint pair with a layout-specific constraint.\n\nThe container is properly revalidated and repainted after removal.\n\nExamples:\n\n  ; Add a label and a checkbox to a panel\n  (add! (vertical-panel) \"Hello\" (button ...))\n\n  ; Add a label and a checkbox to a border panel with layout constraints\n  (add! (border-panel) [\"Hello\" :north] [(button ...) :center])\n\nReturns the target container *after* it's been passed through (to-widget).\n",
   :var-type "function",
   :line 3507,
   :file "src/seesaw/core.clj"}
  {:arglists ([source message] [message]),
   :name "alert",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/alert",
   :doc
   "Show a simple message alert dialog. Take an optional parent component, source,\nused for dialog placement, and a message which is passed through (resource).\n\nExamples:\n\n  (alert \"Hello!\")\n  (alert e \"Hello!\")\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JOptionPane.html#showMessageDialog%28java.awt.Component,%20java.lang.Object%29\n",
   :var-type "function",
   :line 2943,
   :file "src/seesaw/core.clj"}
  {:arglists ([]),
   :name "all-frames",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/all-frames",
   :doc
   "Returns a sequence of all of the frames (includes java.awt.Frame) known by the JVM.\n\nThis function is really only useful for debugging and repl development, namely:\n\n  ; Clear out all frames\n  (dispose! (all-frames))\n\nOtherwise, it is highly unreliable. Frames will hang around after disposal, pile up\nand generally cause trouble.\n\nYou've been warned.",
   :var-type "function",
   :line 308,
   :file "src/seesaw/core.clj"}
  {:arglists ([message]),
   :name "assert-ui-thread",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/assert-ui-thread",
   :doc
   "Verify that the current thread is the Swing UI thread and throw\nIllegalStateException if it's not. message is included in the exception\nmessage.\n\nReturns nil.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#isEventDispatchThread%28%29\n",
   :var-type "function",
   :line 88,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "border-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/border-panel",
   :doc
   "Create a panel with a border layout. In addition to the usual options,\nsupports:\n\n  :north  widget for north position (passed through make-widget)\n  :south  widget for south position (passed through make-widget)\n  :east   widget for east position (passed through make-widget)\n  :west   widget for west position (passed through make-widget)\n  :center widget for center position (passed through make-widget)\n\n  :hgap   horizontal gap between widgets\n  :vgap   vertical gap between widgets\n\nThe :items option is a list of widget/direction pairs which can be used\nif you don't want to use the direction options directly. For example, both\nof these are equivalent:\n\n  (border-panel :north \"North\" :south \"South\")\n\nis the same as:\n\n  (border-panel :items [[\"North\" :north] [\"South\" :south]])\n\nThis is for consistency with other containers.\n\nSee:\n\n  http://download.oracle.com/javase/6/docs/api/java/awt/BorderLayout.html\n",
   :var-type "function",
   :line 944,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "button",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/button",
   :doc
   "Construct a generic button. In addition to default widget options, supports\nthe following:\n\n    :halign    Horizontal alignment. One of :left, :right, :leading, :trailing,\n               :center\n    :valign    Vertical alignment. One of :top, :center, :bottom\n    :selected? Whether the button is initially selected. Mostly for checked\n               and radio buttons/menu-items.\n    :margin    The button margins as insets. See (seesaw.util/to-insets)\n    :group     A button-group that the button should be added to.\n    :resource  A resource prefix (see below).\n    :mnemonic  The mnemonic for the button, either a character or a keycode.\n                Usually allows the user to activate the button with alt-mnemonic.\n                See (seesaw.util/to-mnemonic-keycode).\n\nResources and i18n:\n\n  A button's base properties can be set from a resource prefix, i.e. a namespace-\n  qualified keyword that refers to a resource bundle loadable by j18n.\n\nExamples:\n\n  ; Create a button with text \"Next\" with alt-N mnemonic shortcut that shows\n  ; an alert when clicked.\n  (button :text \"Next\"\n          :mnemonic \\N\n          :listen [:action #(alert \"NEXT!\")])\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JButton.html\n  (seesaw.core/button-group)",
   :var-type "function",
   :line 1231,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "button-group",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/button-group",
   :doc
   "Creates a button group, i.e. a group of mutually exclusive toggle buttons,\nradio buttons, toggle-able menus, etc. Takes the following options:\n\n  :buttons A sequence of buttons to include in the group. They are *not*\n           passed through (make-widget), i.e. they must be button or menu\n           instances.\n\nThe mutual exclusion of the buttons in the group will be maintained automatically.\nThe currently \"selected\" button can be retrieved and set with (selection) and\n(selection!) as usual.\n\nNote that a button can be added to a group when the button is created using the\n:group option of the various button and menu creation functions.\n\nExamples:\n\n  (let [bg (button-group)]\n    (flow-panel :items [(radio :id :a :text \"A\" :group bg)\n                        (radio :id :b :text \"B\" :group bg)]))\n\n  ; now A and B are mutually exclusive\n\n  ; Check A\n  (selection bg (select root [:#a]))\n\n  ; Listen for selection changes. Note that the selection MAY BE NIL!\n  (listen bg :selection\n    (fn [e]\n      (if-let [s (selection e)]\n        (println \"Selected \" (text s)))))\n\nReturns an instance of javax.swing.ButtonGroup\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/ButtonGroup.html\n",
   :var-type "function",
   :line 1174,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "canvas",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/canvas",
   :doc
   "Creates a paintable canvas, i.e. a JPanel with paintComponent overridden.\nPainting is configured with the :paint property which can take the\nfollowing values:\n\n  nil - disables painting. The widget will be filled with its background\n    color unless it is not opaque.\n\n  (fn [c g]) - a paint function that takes the widget and a Graphics2D as\n    arguments. Called after super.paintComponent.\n\n  {:before fn :after fn :super? bool} - a map with :before and :after functions which\n    are called before and after super.paintComponent respectively. If super?\n    is false, super.paintComponent is not called.\n\nNotes:\n\n  The :paint option is actually supported by *all* Seesaw widgets.\n\n  (seesaw.core/config!) can be used to change the :paint property at any time.\n\n  Some customizations are also possible and maybe easier with\n  the creative use of borders.\n\nExamples:\n\n  (canvas :paint #(.drawString %2 \"I'm a canvas\" 10 10))\n\nSee:\n  (seesaw.graphics)\n  (seesaw.examples.canvas)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#paintComponent%28java.awt.Graphics%29\n",
   :var-type "function",
   :line 2515,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "card-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/card-panel",
   :doc
   "Create a panel with a card layout. Options:\n\n  :items A list of pairs with format [widget, identifier]\n         where identifier is a string or keyword.\n\nSee:\n\n  (seesaw.core/show-card!)\n  http://download.oracle.com/javase/6/docs/api/java/awt/CardLayout.html\n",
   :var-type "function",
   :line 981,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "checkbox",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/checkbox",
   :doc
   "Same as (seesaw.core/button), but creates a checkbox. Use :selected? option\nto set initial state.\n\nSee:\n  (seesaw.core/button)",
   :var-type "function",
   :line 1279,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "checkbox-menu-item",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/checkbox-menu-item",
   :doc
   "Create a checked menu item for use in (seesaw.core/menu). Supports same options as\n(seesaw.core/button)",
   :var-type "function",
   :line 2220,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "combobox",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/combobox",
   :doc
   "Create a combo box (JComboBox). Additional options:\n\n  :model Instance of ComboBoxModel, or sequence of values used to construct\n         a default model.\n  :renderer Cell renderer used for display. See (seesaw.cells/to-cell-renderer).\n\nNote that the current selection can be retrieved and set with the (selection) and\n(selection!) functions. Calling (seesaw.core/text) on a combobox will return\n(str (selection cb)). (seesaw.core/text!) is not supported.\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JComboBox.html\n",
   :var-type "function",
   :line 1801,
   :file "src/seesaw/core.clj"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/config",
   :namespace "seesaw.core",
   :line 536,
   :var-type "var",
   :doc
   "Alias of seesaw.config/config:\nRetrieve the value of an option from target. For example:\n  \n    (config button1 :text)\n    => \"I'm a button!\"\n  \n  Target must satisfy the Configurable protocol. In general, it may be a widget, \n  or convertible to widget with (to-widget). For example, the target can be an event \n  object.\n\n  Returns the option value. \n  Throws IllegalArgumentException if an unknown option is requested.\n\n  See:\n    (seesaw.core/config!)\n  ",
   :name "config"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/config!",
   :namespace "seesaw.core",
   :line 538,
   :var-type "var",
   :doc
   "Alias of seesaw.config/config!:\nApplies options in the argument list to one or more targets. For example:\n\n    (config! button1 :enabled? false :text \"I' disabled\")\n\n  or:\n\n    (config! [button1 button2] :enabled? false :text \"We're disabled\")\n \n  Targets must satisfy the Configurable protocol. In general, they may be widgets, \n  or convertible to widgets with (to-widget). For example, the target can be an event \n  object.\n\n  Returns the input targets.\n  Throws IllegalArgumentException if an unknown option is encountered.\n\n  See:\n    (seesaw.core/config)\n  ",
   :name "config!"}
  {:arglists ([factory-class]),
   :name "construct",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/construct",
   :doc
   "*experimental. subject to change.*\n\nA macro that returns a proxied instance of the given class. This is\nused by Seesaw to construct widgets that can be fiddled with later,\ne.g. installing a paint handler, etc.",
   :var-type "macro",
   :line 213,
   :file "src/seesaw/core.clj"}
  {:arglists
   ([&
     {:keys [width height visible? modal? on-close size],
      :or {width 100, height 100, visible? false},
      :as opts}]),
   :name "custom-dialog",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/custom-dialog",
   :doc
   "Create a dialog and display it.\n\n    (custom-dialog ... options ...)\n\nBesides the default & frame options, options can also be one of:\n\n  :parent  The window which the new dialog should be positioned relatively to.\n  :modal?  A boolean value indicating whether this dialog is to be a\n            modal dialog.  If :modal? *and* :visible? are set to\n            true (:visible? is true per default), the function will\n            block with a dialog. The function will return once the user:\n            a) Closes the window by using the system window\n               manager (e.g. by pressing the \"X\" icon in many OS's)\n            b) A function from within an event calls (dispose!) on the dialog\n            c) A function from within an event calls RETURN-FROM-DIALOG\n                with a return value.\n            In the case of a) and b), this function returns nil. In the\n            case of c), this function returns the value passed to\n            RETURN-FROM-DIALOG. Default: true.\n\n\nReturns a JDialog. Use (seesaw.core/show!) to display the dialog.\n\nNotes:\n\nSee:\n  (seesaw.core/show!)\n  (seesaw.core/return-from-dialog)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JDialog.html",
   :var-type "function",
   :line 2896,
   :file "src/seesaw/core.clj"}
  {:arglists ([& {:as opts}]),
   :name "dialog",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/dialog",
   :doc
   "Display a JOptionPane. This is a dialog which displays some\ninput/question to the user, which may be answered using several\nstandard button configurations or entirely custom ones.\n\n    (dialog ... options ...)\n\nOptions can be any of:\n\n  :content      May be a string or a component (or a panel with even more\n                components) which is to be displayed.\n\n  :option-type  In case :options is *not* specified, this may be one of\n                :default, :yes-no, :yes-no-cancel, :ok-cancel to specify\n                which standard button set is to be used in the dialog.\n\n  :type        The type of the dialog. One of :warning, :error, :info, :plain, or :question.\n\n  :options     Custom buttons/options can be provided using this argument.\n               It must be a seq of \"make-widget\"'able objects which will be\n               displayed as options the user can choose from. Note that in this\n               case, :success-fn, :cancel-fn & :no-fn will *not* be called.\n               Use the handlers on those buttons & RETURN-FROM-DIALOG to close\n               the dialog.\n\n  :default-option  The default option instance which is to be selected. This should be an element\n                   from the :options seq.\n\n  :success-fn  A function taking the JOptionPane as its only\n               argument. It will be called when no :options argument\n               has been specified and the user has pressed any of the \"Yes\" or \"Ok\" buttons.\n               Default: a function returning :success.\n\n  :cancel-fn   A function taking the JOptionPane as its only\n               argument. It will be called when no :options argument\n               has been specified and the user has pressed the \"Cancel\" button.\n               Default: a function returning nil.\n\n  :no-fn       A function taking the JOptionPane as its only\n               argument. It will be called when no :options argument\n               has been specified and the user has pressed the \"No\" button.\n               Default: a function returning :no.\n\nAny remaining options will be passed to dialog.\n\nExamples:\n\n  ; display a dialog with only an \"Ok\" button.\n  (dialog :content \"You may now press Ok\")\n\n  ; display a dialog to enter a users name and return the entered name.\n  (dialog :content\n   (flow-panel :items [\"Enter your name\" (text :id :name :text \"Your name here\")])\n               :option-type :ok-cancel\n               :success-fn (fn [p] (text (select (to-root p) [:#name]))))\n\nThe dialog is not immediately shown. Use (seesaw.core/show!) to display the dialog.\nIf the dialog is modal this will return the result of :success-fn, :cancel-fn or\n:no-fn depending on what button the user pressed.\n\nAlternatively if :options has been specified, returns the value which has been\npassed to (seesaw.core/return-from-dialog).\n\nSee:\n  (seesaw.core/show!)\n  (seesaw.core/return-from-dialog)",
   :var-type "function",
   :line 3074,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets]),
   :name "dispose!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/dispose!",
   :doc
   "Dispose the given frame, dialog or window. target can be anything that can\nbe converted to a root-level object with (to-root).\n\nReturns its input.\n\nSee:\n http://download.oracle.com/javase/6/docs/api/java/awt/Window.html#dispose%28%29\n",
   :var-type "function",
   :line 294,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "editor-pane",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/editor-pane",
   :doc
   "Create a JEditorPane. Custom options:\n\n  :page         A URL (string or java.net.URL) with the contents of the editor\n  :content-type The content-type, for example \"text/html\" for some crappy\n                HTML rendering.\n  :editor-kit   The EditorKit. See Javadoc.\n\nNotes:\n\n  An editor pane can fire 'hyperlink' events when elements are click,\n  say like a hyperlink in an html doc. You can listen to these with the\n  :hyperlink event:\n\n    (listen my-editor :hyperlink (fn [e] ...))\n\n  where the event is an instance of javax.swing.event.HyperlinkEvent.\n  From there you can inspect the event, inspect the clicked element,\n  etc.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JEditorPane.html\n  http://docs.oracle.com/javase/6/docs/api/javax/swing/event/HyperlinkEvent.html\n",
   :var-type "function",
   :line 1595,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "flow-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/flow-panel",
   :doc
   "Create a panel with a flow layout. Options:\n\n  :items  List of widgets (passed through make-widget)\n  :hgap   horizontal gap between widgets\n  :vgap   vertical gap between widgets\n  :align  :left, :right, :leading, :trailing, :center\n  :align-on-baseline?\n\nSee http://download.oracle.com/javase/6/docs/api/java/awt/FlowLayout.html\n",
   :var-type "function",
   :line 1014,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "form-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/form-panel",
   :doc
   "*Don't use this. GridBagLaout is an abomination* I suggest using Seesaw's\nMigLayout (seesaw.mig) or JGoogies Forms (seesaw.forms) support instead.\n\nA panel that uses a GridBagLayout. Also aliased as (grid-bag-panel) if you\nwant to be reminded of GridBagLayout. The :items property should be a list\nof vectors of the form:\n\n    [widget & options]\n\nwhere widget is something widgetable and options are key/value pairs\ncorresponding to GridBagConstraints fields. For example:\n\n  [[\"Name\"         :weightx 0]\n   [(text :id :name) :weightx 1 :fill :horizontal]]\n\nThis creates a label/field pair where the field expands.\n\nSee http://download.oracle.com/javase/6/docs/api/java/awt/GridBagLayout.html\n",
   :var-type "function",
   :line 1087,
   :file "src/seesaw/core.clj"}
  {:arglists ([& {:keys [width height visible? size], :as opts}]),
   :name "frame",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/frame",
   :doc
   "Create a JFrame. Options:\n\n  :id       id of the window, used by (select).\n  :title    the title of the window\n  :icon     the icon of the frame (varies by platform)\n  :width    initial width. Note that calling (pack!) will negate this setting\n  :height   initial height. Note that calling (pack!) will negate this setting\n  :size     initial size. Note that calling (pack!) will negate this setting\n  :minimum-size minimum size of frame, e.g. [640 :by 480]\n  :content  passed through (make-widget) and used as the frame's content-pane\n  :visible?  whether frame should be initially visible (default false)\n  :resizable? whether the frame can be resized (default true)\n  :on-close   default close behavior. One of :exit, :hide, :dispose, :nothing\n\nreturns the new frame.\n\nExamples:\n\n  ; Create a frame, pack it and show it.\n  (-> (frame :title \"HI!\" :content \"I'm a label!\")\n    pack!\n    show!)\n\n  ; Create a frame with an initial size (note that pack! isn't called)\n  (show! (frame :title \"HI!\" :content \"I'm a label!\" :width 500 :height 600))\n\nNotes:\n  Unless :visible? is set to true, the frame will not be displayed until (show!)\n  is called on it.\n\n  Call (pack!) on the frame if you'd like the frame to resize itself to fit its\n  contents. Sometimes this doesn't look like crap.\n\nSee:\n  (seesaw.core/show!)\n  (seesaw.core/hide!)\n  (seesaw.core/move!)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JFrame.html\n",
   :var-type "function",
   :line 2733,
   :file "src/seesaw/core.clj"}
  {:arglists ([device window] [window]),
   :name "full-screen!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/full-screen!",
   :doc
   "Make the given window/frame full-screen. Pass nil to return all windows\nto normal size.",
   :var-type "function",
   :line 2672,
   :file "src/seesaw/core.clj"}
  {:arglists ([device] []),
   :name "full-screen-window",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/full-screen-window",
   :doc
   "Returns the window/frame that is currently in full-screen mode or nil if\nnone.",
   :var-type "function",
   :line 2657,
   :file "src/seesaw/core.clj"}
  {:arglists ([device window] [window]),
   :name "full-screen?",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/full-screen?",
   :doc
   "Returns true if the given window/frame is in full-screen mode",
   :var-type "function",
   :line 2665,
   :file "src/seesaw/core.clj"}
  {:arglists ([& {:keys [rows columns], :as opts}]),
   :name "grid-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/grid-panel",
   :doc
   "Create a panel where widgets are arranged horizontally. Options:\n\n  :rows    Number of rows, defaults to 0, i.e. unspecified.\n  :columns Number of columns.\n  :items   List of widgets (passed through make-widget)\n  :hgap    horizontal gap between widgets\n  :vgap    vertical gap between widgets\n\nNote that it's usually sufficient to just give :columns and ignore :rows.\n\nSee http://download.oracle.com/javase/6/docs/api/java/awt/GridLayout.html\n",
   :var-type "function",
   :line 1064,
   :file "src/seesaw/core.clj"}
  {:arglists ([root]),
   :name "group-by-id",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/group-by-id",
   :doc
   "Group the widgets in a hierarchy starting at some root into a map\nkeyed by :id. Widgets with no id are ignored. If an id appears twice,\nthe 'later' widget wins.\n\n  root is any (to-widget)-able object.\n\nExamples:\n\n  Suppose you have a form with with widgets with ids :name, :address,\n  :phone, :city, :state, :zip.\n  You'd like to quickly grab all those widgets and do something with\n  them from an event handler:\n\n    (fn [event]\n      (let [{:keys [name address phone city state zip]} (group-by-id event)\n        ... do something ...))\n\n  This is functionally equivalent to, but faster than:\n\n    (let [name (select event [:#name])\n          address (select event [:#address])\n          phone (select event [:#phone])\n          ... and so on ...]\n        ... do something ...)\n\nSee:\n  (seesaw.core/select)\n",
   :var-type "function",
   :line 3432,
   :file "src/seesaw/core.clj"}
  {:arglists ([w]),
   :name "height",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/height",
   :doc "Returns the height of the given widget in pixels",
   :var-type "function",
   :line 467,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets]),
   :name "hide!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/hide!",
   :doc
   "Hide a frame, dialog or widget.\n\n Returns its input.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/java/awt/Window.html#setVisible%28boolean%29\n",
   :var-type "function",
   :line 267,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "horizontal-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/horizontal-panel",
   :doc
   "Create a panel where widgets are arranged horizontally. Options:\n\n  :items List of widgets (passed through make-widget)\n\nSee http://download.oracle.com/javase/6/docs/api/javax/swing/BoxLayout.html\n",
   :var-type "function",
   :line 1039,
   :file "src/seesaw/core.clj"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/id-for",
   :namespace "seesaw.core",
   :line 487,
   :var-type "var",
   :doc "Deprecated. See (seesaw.core/id-of)",
   :name "id-for"}
  {:arglists ([w]),
   :name "id-of",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/id-of",
   :doc
   "Returns the id of the given widget if the :id property was specified at\n creation. The widget parameter is passed through (to-widget) first so\n events and other objects can also be used. The id is always returned as\n a string, even it if was originally given as a keyword.\n\nReturns the id as a keyword, or nil.\n\nSee:\n  (seesaw.core/select).\n",
   :var-type "function",
   :line 473,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "input",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/input",
   :doc
   "Show an input dialog:\n\n  (input [source] message & options)\n\nsource  - optional parent component\nmessage - The message to show the user. May be a string, or list of strings, widgets, etc.\noptions - additional options\n\nAdditional options:\n\n  :title     The dialog title\n  :value     The initial, default value to show in the dialog\n  :choices   List of values to choose from rather than freeform entry\n  :type      :warning, :error, :info, :plain, or :question\n  :icon      Icon to display (Icon, URL, etc)\n  :to-string A function which creates the string representation of the values\n             in :choices. This let's you choose arbitrary clojure data structures\n             without while keeping things looking nice. Defaults to str.\n\nExamples:\n\n  ; Ask for a string input\n  (input \"Bang the keyboard like a monkey\")\n\n  ; Ask for a choice from a set\n  (input \"Pick a color\" :choices [\"RED\" \"YELLO\" \"GREEN\"])\n\n  ; Choose from a list of maps using a custom string function for the display.\n  ; This will display only the city names, but the return value will be one of\n  ; maps in the :choices list. Yay!\n  (input \"Pick a city\"\n    :choices [{ :name \"New York\"  :population 8000000 }\n              { :name \"Ann Arbor\" :population 100000 }\n              { :name \"Twin Peaks\" :population 5201 }]\n    :to-string :name)\n\nReturns the user input or nil if they hit cancel.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JOptionPane.html\n",
   :var-type "function",
   :line 2998,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "invoke-later",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/invoke-later",
   :doc "Alias for seesaw.invoke/invoke-later",
   :var-type "macro",
   :line 60,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "invoke-now",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/invoke-now",
   :doc "Alias for seesaw.invoke/invoke-now",
   :var-type "macro",
   :line 55,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "invoke-soon",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/invoke-soon",
   :doc "Alias for seesaw.invoke/invoke-soon",
   :var-type "macro",
   :line 65,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "label",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/label",
   :doc
   "Create a label. Supports all default properties. Can take two forms:\n\n    (label \"My Label\")  ; Single text argument for the label\n\nor with full options:\n\n    (label :id :my-label :text \"My Label\" ...)\n\nAdditional options:\n\n  :h-text-position Horizontal text position, :left, :right, :center, etc.\n  :v-text-position Horizontal text position, :top, :center, :bottom, etc.\n  :resource        Namespace-qualified keyword which is a resource prefix for the\n                   labels properties\n\nResources and i18n:\n\n  A label's base properties can be set from a resource prefix, i.e. a namespace-\n  qualified keyword that refers to a resource bundle loadable by j18n.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JLabel.html\n",
   :var-type "function",
   :line 1127,
   :file "src/seesaw/core.clj"}
  {:arglists ([left right & args]),
   :name "left-right-split",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/left-right-split",
   :doc
   "Create a left/right (horizontal) splitpane with the given widgets. See\n(seesaw.core/splitter) for additional options. Options are given after\nthe two widgets.\n\nNotes:\n\nSee:\n  (seesaw.core/splitter)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSplitPane.html\n",
   :var-type "function",
   :line 2150,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "listbox",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/listbox",
   :doc
   "Create a list box (JList). Additional options:\n\n  :model A ListModel, or a sequence of values with which a DefaultListModel\n         will be constructed.\n  :renderer A cell renderer to use. See (seesaw.cells/to-cell-renderer).\n\nNotes:\n\n  Retrieving and setting the current selection of the list box is fully\n  supported by the (selection) and (selection!) functions.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JList.html\n",
   :var-type "function",
   :line 1647,
   :file "src/seesaw/core.clj"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/listen",
   :namespace "seesaw.core",
   :line 112,
   :var-type "var",
   :doc
   "Alias of seesaw.event/listen:\n\n*note: use seesaw.core/listen rather than calling this directly*\n\nInstall listeners for one or more events on the given target. For example:\n\n  (listen (button \"foo\")\n    :mouse-entered     (fn [e] ...)\n    :focus-gained      (fn [e] ...)\n    :key-pressed       (fn [e] ...)\n    :mouse-wheel-moved (fn [e] ...))\n\none function can be registered for multiple events by using a set\nof event names instead of one:\n\n  (listen (text)\n    #{:remove-update insert-update} (fn [e] ...))\n\nNote in this case that it's smart enough to add a document listener\nto the JTextFields document.\n\nSimilarly, an event can be registered for all events in a particular swing\nlistener interface by just using the keyword-ized prefix of the interface\nname. For example, to get all callbacks in the MouseListener interface:\n\n  (listen my-widget :mouse (fn [e] ...))\n\nReturns a function which, when called, removes all listeners registered\nwith this call.\n\nWhen the target is a JTable and listener type is :selection, only\nrow selection events are reported. Also note that the source table is\n*not* retrievable from the event object.\n",
   :name "listen"}
  {:arglists ([v]),
   :name "make-widget",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/make-widget",
   :doc
   "Try to create a new widget based on the following rules:\n\n  nil -> nil\n  java.awt.Component -> return argument unchanged (like to-widget)\n  java.util.EventObject -> return the event source (like to-widget)\n\n  java.awt.Dimension -> return Box/createRigidArea\n  java.swing.Action    -> return a button using the action\n  :separator -> create a horizontal JSeparator\n  :fill-h -> Box/createHorizontalGlue\n  :fill-v -> Box/createVerticalGlue\n  [:fill-h n] -> Box/createHorizontalStrut with width n\n  [:fill-v n] -> Box/createVerticalStrut with height n\n  [width :by height] -> create rigid area with given dimensions\n  java.net.URL -> a label with the image located at the url\n  Anything else -> a label with the text from passing the object through str\n",
   :var-type "function",
   :line 177,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "menu",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/menu",
   :doc
   "Create a new menu. In addition to all options applicable to (seesaw.core/button)\nthe following additional options are supported:\n\n  :items Sequence of menu item-like things (actions, icons, JMenuItems, etc)\n\nNotes:\n\nSee:\n  (seesaw.core/button)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JMenu.html",
   :var-type "function",
   :line 2263,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "menu-item",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/menu-item",
   :doc
   "Create a menu item for use in (seesaw.core/menu). Supports same options as\n(seesaw.core/button)",
   :var-type "function",
   :line 2212,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "menubar",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/menubar",
   :doc
   "Create a new menu bar, suitable for the :menubar property of (frame).\nAdditional options:\n\n  :items Sequence of menus, see (menu).\n\nNotes:\n\nSee:\n  (seesaw.core/frame)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JMenuBar.html\n",
   :var-type "function",
   :line 2333,
   :file "src/seesaw/core.clj"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/model-option",
   :namespace "seesaw.core",
   :line 684,
   :var-type "var",
   :doc
   "Default handler for the :model option. Delegates to the ConfigModel protocol",
   :name "model-option"}
  {:arglists ([target how & [loc]]),
   :name "move!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/move!",
   :doc
   "Move a widget relatively or absolutely. target is a 'to-widget'-able object,\ntype is :by or :to, and loc is a two-element vector or instance of\njava.awt.Point. The how type parameter has the following interpretation:\n\n  :to The absolute position of the widget is set to the given point\n  :by The position of th widget is adjusted by the amount in the given point\n      relative to its current position.\n  :to-front Move the widget to the top of the z-order in its parent.\n\nReturns target.\n\nExamples:\n\n  ; Move x to the point (42, 43)\n  (move! x :to [42, 43])\n\n  ; Move x to y position 43 while keeping x unchanged\n  (move! x :to [:*, 43])\n\n  ; Move x relative to its current position. Assume initial position is (42, 43).\n  (move! x :by [50, -20])\n  ; ... now x's position is [92, 23]\n\nNotes:\n  For widgets, this function will generally only have an affect on widgets whose container\n  has a nil layout! This function has similar functionality to the :bounds\n  and :location options, but is a little more flexible and readable.\n\nSee:\n  (seesaw.core/xyz-panel)\n  http://download.oracle.com/javase/6/docs/api/java/awt/Component.html#setLocation(int, int)\n",
   :var-type "function",
   :line 412,
   :file "src/seesaw/core.clj"}
  {:arglists ([]),
   :name "native!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/native!",
   :doc
   "Set native look and feel and other options to try to make things look right.\nThis function must be called very early, like before any other Seesaw or Swing\ncalls!\n\nNote that on OSX, you can set the application name in the menu bar (usually\ndisplayed as the main class name) by setting the -Xdock:<name-of-your-app>\nparameter to the JVM at startup. Sorry, I don't know of a way to do it\ndynamically.\n\nSee:\n\nhttp://developer.apple.com/library/mac/#documentation/Java/Conceptual/Java14Development/07-NativePlatformIntegration/NativePlatformIntegration.html\n",
   :var-type "function",
   :line 70,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets]),
   :name "pack!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/pack!",
   :doc
   "Pack a frame or window, causing it to resize to accommodate the preferred\nsize of its contents.\n\nReturns its input.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/java/awt/Window.html#pack%28%29\n",
   :var-type "function",
   :line 280,
   :file "src/seesaw/core.clj"}
  {:arglists ([cls & opts]),
   :name "paintable",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/paintable",
   :doc
   "*Deprecated. Just use :paint directly on any widget.*\n\n Macro that generates a paintable widget, i.e. a widget that can be drawn on\n by client code. target is a Swing class literal indicating the type that will\n be constructed.\n\n All other options will be passed along to the given Seesaw widget\n as usual and will be applied to the generated class.\n\n Notes:\n   If you just want a panel to draw on, use (seesaw.core/canvas). This macro is\n   intended for customizing the appearance of existing widget types.\n\n Examples:\n\n   ; Create a raw JLabel and paint over it.\n   (paintable javax.swing.JLabel :paint (fn [c g] (.fillRect g 0 0 20 20))\n\n See:\n   (seesaw.core/canvas)\n   (seesaw.graphics)\n   http://download.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#paintComponent%28java.awt.Graphics%29\n",
   :var-type "macro",
   :line 2486,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "password",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/password",
   :doc
   "Create a password field. Options are the same as single-line text fields with\nthe following additions:\n\n  :echo-char The char displayed for the characters in the password field\n\nReturns an instance of JPasswordField.\n\nExample:\n\n  (password :echo-char \\X)\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JPasswordField.html\n",
   :var-type "function",
   :line 1535,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "popup",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/popup",
   :doc
   "Create a new popup menu. Additional options:\n\n  :items Sequence of menu item-like things (actions, icons, JMenuItems, etc)\n\nNote that in many cases, the :popup option is what you want if you want to\nshow a context menu on a widget. It handles all the yucky mouse stuff and\nfixes various eccentricities of Swing.\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JPopupMenu.html",
   :var-type "function",
   :line 2293,
   :file "src/seesaw/core.clj"}
  {:arglists ([& {:keys [orientation value min max], :as opts}]),
   :name "progress-bar",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/progress-bar",
   :doc
   "Show a progress-bar which can be used to display the progress of long running tasks.\n\n    (progress-bar ... options ...)\n\nBesides the default options, options can also be one of:\n\n  :orientation   The orientation of the progress-bar. One of :horizontal, :vertical. Default: :horizontal.\n  :value         The initial numerical value that is to be set. Default: 0.\n  :min           The minimum numerical value which can be set. Default: 0.\n  :max           The maximum numerical value which can be set. Default: 100.\n  :paint-string? A boolean value indicating whether to paint a string containing\n                 the progress' percentage. Default: false.\n  :indeterminate? A boolean value indicating whether the progress bar is to be in\n                  indeterminate mode (for when the exact state of the task is not\n                  yet known). Default: false.\n\nExamples:\n\n  ; vertical progress bar from 0 to 100 starting with inital value at 15.\n  (progress-bar :orientation :vertical :min 0 :max 100 :value 15)\n\nReturns a JProgressBar.\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JProgressBar.html",
   :var-type "function",
   :line 3256,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "radio",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/radio",
   :doc
   "Same as (seesaw.core/button), but creates a radio button. Use :selected? option\nto set initial state.\n\nSee:\n  (seesaw.core/button)",
   :var-type "function",
   :line 1290,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "radio-menu-item",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/radio-menu-item",
   :doc
   "Create a radio menu item for use in (seesaw.core/menu). Supports same options as\n(seesaw.core/button).\n\nNotes:\n  Use (seesaw.core/button-group) or the :group option to enforce mutual exclusion\n  across menu items.",
   :var-type "function",
   :line 2228,
   :file "src/seesaw/core.clj"}
  {:arglists ([container subject & more]),
   :name "remove!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/remove!",
   :doc
   "Remove one or more widgets from a container. container and each widget\nare passed through (to-widget) as usual, but no new widgets are created.\n\nThe container is properly revalidated and repainted after removal.\n\nExamples:\n\n  (def lbl (label \"HI\"))\n  (def p (border-panel :north lbl))\n  (remove! p lbl)\n\nReturns the target container *after* it's been passed through (to-widget).\n",
   :var-type "function",
   :line 3528,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets]),
   :name "repaint!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/repaint!",
   :doc
   "Request a repaint of one or a list of widget-able things.\n\nExample:\n\n  ; Repaint just one widget\n  (repaint! my-widget)\n\n  ; Repaint all widgets in a hierarcy\n  (repaint! (select [:*] root))\n\nReturns targets.\n",
   :var-type "function",
   :line 323,
   :file "src/seesaw/core.clj"}
  {:arglists ([container old-widget new-widget]),
   :name "replace!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/replace!",
   :doc
   "Replace old-widget with new-widget from container. container and old-widget\nare passed through (to-widget). new-widget is passed through make-widget.\nNote that the layout constraints of old-widget are retained for the new widget.\nThis is different from the behavior you'd get with just remove/add in Swing.\n\nThe container is properly revalidated and repainted after replacement.\n\nExamples:\n\n  ; Replace a label with a new label.\n  (def lbl (label \"HI\"))\n  (def p (border-panel :north lbl))\n  (replace! p lbl \"Goodbye\")\n\nReturns the target container *after* it's been passed through (to-widget).\n",
   :var-type "function",
   :line 3546,
   :file "src/seesaw/core.clj"}
  {:arglists ([target]),
   :name "request-focus!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/request-focus!",
   :doc
   "Request focus for the given widget-able thing. This will try to give\nkeyboard focus to the given widget. Returns its input.\n\nThe widget must be :focusable? for this to succeed.\n\nExample:\n  (request-focus! my-widget)\n\n  ; Move focus on click\n  (listen my-widget :focus-gained request-focus!)\n\nSee:\n  http://docs.oracle.com/javase/6/docs/api/javax/swing/JComponent.html#requestFocusInWindow()\n",
   :var-type "function",
   :line 341,
   :file "src/seesaw/core.clj"}
  {:arglists ([dlg result]),
   :name "return-from-dialog",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/return-from-dialog",
   :doc
   "Return from the given dialog with the specified value. dlg may be anything\nthat can be converted into a dialog as with (to-root). For example, an\nevent, or a child widget of the dialog. Result is the value that will\nbe returned from the blocking (dialog), (custom-dialog), or (show!)\ncall.\n\nExamples:\n\n  ; A button with an action listener that will cause the dialog to close\n  ; and return :ok to the invoker.\n  (button\n    :text \"OK\"\n    :listen [:action (fn [e] (return-from-dialog e :ok))])\n\nNotes:\n  The dialog must be modal and created from within the DIALOG fn with\n  :modal? set to true.\n\nSee:\n  (seesaw.core/dialog)\n  (seesaw.core/custom-dialog)\n",
   :var-type "function",
   :line 2863,
   :file "src/seesaw/core.clj"}
  {:arglists ([target modifier arg]),
   :name "scroll!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/scroll!",
   :doc
   "Scroll a widget. Obviously, the widget must be contained in a scrollable.\nReturns the widget.\n\nThe basic format of the function call is:\n\n  (scroll! widget modifier argument)\n\nwidget is passed through (to-widget) as usual. Currently, the only accepted\nvalue for modifier is :to. The interpretation and set of accepted values for\nargument depends on the type of widget:\n\n  All Widgets:\n\n    :top           - Scroll to the top of the widget\n    :bottom        - Scroll to the bottom of the widget\n    java.awt.Point - Scroll so the given pixel point is visible\n    java.awt.Rectangle - Scroll so the given rectangle is visible\n    [:point x y]   - Scroll so the given pixel point is visible\n    [:rect x y w h] - Scroll so the given rectable is visible\n\n  listboxes (JList):\n\n    [:row n] - Scroll so that row n is visible\n\n  tables (JTable):\n\n    [:row n]        - Scroll so that row n is visible\n    [:column n]     - Scroll so that column n is visible\n    [:cell row col] - Scroll so that the given cell is visible\n\n  text widgets:\n\n    [:line n] - Scroll so that line n is visible\n    [:position n] - Scroll so that position n (character offset) is visible\n\n    Note that for text widgets, the caret will also be moved which in turn\n    causes the selection to change.\n\nExamples:\n\n  (scroll! w :to :top)\n  (scroll! w :to :bottom)\n  (scroll! w :to [:point 99 10])\n  (scroll! w :to [:rect  99 10 100 100])\n\n  (scroll! listbox :to [:row 99])\n\n  (scroll! table :to [:row 99])\n  (scroll! table :to [:column 10])\n  (scroll! table :to [:cell 99 10])\n\n  (scroll! text :to [:line 200])\n  (scroll! text :to [:position 2000])\n\nSee:\n  (seesaw.scroll/scroll!*)\n  (seesaw.examples.scroll)\n",
   :var-type "function",
   :line 2001,
   :file "src/seesaw/core.clj"}
  {:arglists ([target & opts]),
   :name "scrollable",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/scrollable",
   :doc
   "Wrap target in a JScrollPane and return the scroll pane.\n\nThe first argument is always the widget that should be scrolled. It's followed\nby zero or more options *for the scroll pane*.\n\nAdditional Options:\n\n  :hscroll       - Controls appearance of horizontal scroll bar.\n                   One of :as-needed (default), :never, :always\n  :vscroll       - Controls appearance of vertical scroll bar.\n                   One of :as-needed (default), :never, :always\n  :row-header    - Row header widget or viewport\n  :column-header - Column header widget or viewport\n  :lower-left    - Widget in lower-left corner\n  :lower-right   - Widget in lower-right corner\n  :upper-left    - Widget in upper-left corner\n  :upper-right   - Widget in upper-right corner\n\nExamples:\n\n  ; Vanilla scrollable\n  (scrollable (listbox :model [\"Foo\" \"Bar\" \"Yum\"]))\n\n  ; Scrollable with some options on the JScrollPane\n  (scrollable (listbox :model [\"Foo\" \"Bar\" \"Yum\"]) :id :#scrollable :border 5)\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JScrollPane.html\n",
   :var-type "function",
   :line 1964,
   :file "src/seesaw/core.clj"}
  {:arglists ([root selector]),
   :name "select",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/select",
   :doc
   "Select a widget using the given selector expression. Selectors are *always*\n expressed as a vector. root is the root of the widget hierarchy to select\n from, usually either a (frame) or other container.\n\n  (select root [:#id])          Look up widget by id. A single widget is\n                                always returned.\n\n  (select root [:tag])          Look up widgets by \"tag\". In Seesaw tag is\n                                treated as the exact simple class name of a\n                                widget, so :JLabel would match both\n                                javax.swing.JLabel *and* com.me.JLabel.\n                                Be careful!\n\n  (select root [:<class-name>]) Look up widgets by *fully-qualified* class name.\n                                Matches sub-classes as well. Always returns a\n                                sequence of widgets.\n\n  (select root [:<class-name!>]) Same as above, but class must match exactly.\n\n  (select root [:*])             Root and all the widgets under it\n\nNotes:\n  This function will return a single widget *only* in the case where the selector\n  is a single identifier, e.g. [:#my-id]. In *all* other cases, a sequence of\n  widgets is returned. This is for convenience. Select-by-id is the common case\n  where a single widget is almost always desired.\n\nExamples:\n\n  To find a widget by id from an event handler, use (to-root) on the event to get\n  the root and then select on the id:\n\n    (fn [e]\n      (let [my-widget (select (to-root e) [:#my-widget])]\n        ...))\n\n  Disable all JButtons (excluding subclasses) in a hierarchy:\n\n    (config! (select root [:<javax.swing.JButton>]) :enabled? false)\n\n  More:\n\n    ; All JLabels, no sub-classes allowed\n    (select root [:<javax.swing.JLabel!>])\n\n    ; All JSliders that are descendants of a JPanel with id foo\n    (select root [:JPanel#foo :JSlider])\n\n    ; All JSliders (and sub-classes) that are immediate children of a JPanel with id foo\n    (select root [:JPanel#foo :> :<javax.swing.JSlider>])\n\n    ; All widgets with class foo. Set the class of a widget with the :class option\n    (flow-panel :class :my-class) or (flow-panel :class #{:class1 :class2})\n    (select root [:.my-class])\n    (select root [:.class1.class2])\n\n    ; Select all text components with class input\n    (select root [:<javax.swing.text.JTextComponent>.input])\n\n    ; Select all descendants of all panels with class container\n    (select root [:JPanel.container :*])\n\nSee:\n  (seesaw.selector/select)\n  https://github.com/cgrand/enlive\n",
   :var-type "function",
   :line 3322,
   :file "src/seesaw/core.clj"}
  {:arglists ([target]),
   :name "select-with",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/select-with",
   :doc
   "Returns an object with the following properties:\n\n * Equivalent to (partial seesaw.core/select (to-widget target)), i.e. it\n   returns a function that performs a select on the target.\n * Calling (to-widget) on it returns the same value as (to-widget target).\n\nThis basically allows you to pack a widget and the select function into a single\npackage for convenience. For example:\n\n  (defn make-frame [] (frame ...))\n\n  (defn add-behaviors [$]\n    (let [widget-a ($ [:#widget-a])\n          buttons  ($ [:.button])\n          ...]\n      ...)\n    $)\n\n  (defn -main []\n    (-> (make-frame) select-with add-behaviors pack! show!))\n\nSee:\n  (seesaw.core/select)\n  (seesaw.core/to-widget)\n",
   :var-type "function",
   :line 3403,
   :file "src/seesaw/core.clj"}
  {:arglists ([target] [target options]),
   :name "selection",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/selection",
   :doc
   "Gets the selection of a widget. target is passed through (to-widget)\nso event objects can also be used. The default behavior is to return\na *single* selection value, even if the widget supports multiple selection.\nIf there is no selection, returns nil.\n\noptions is an option map which supports the following flags:\n\n  multi? - If true the return value is a seq of selected values rather than\n    a single value.\n\nExamples:\n\n(def t (table))\n(listen t :selection\n  (fn [e]\n    (let [selected-rows (selection t {:multi? true})]\n      (println \"Currently selected rows: \" selected-rows))))\n\nSee:\n  (seesaw.core/selection!)\n  (seesaw.selection/selection)\n",
   :var-type "function",
   :line 125,
   :file "src/seesaw/core.clj"}
  {:arglists ([target new-selection] [target opts new-selection]),
   :name "selection!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/selection!",
   :doc
   "Sets the selection on a widget. target is passed through (to-widget)\nso event objects can also be used. The arguments are the same as\n(selection). By default, new-selection is a single new selection value.\nIf new-selection is nil, the selection is cleared.\n\noptions is an option map which supports the following flags:\n\n  multi? - if true new-expression is a list of values to selection,\n    the same as the list returned by (selection).\n\nAlways returns target.\n\nSee:\n  (seesaw.core/selection)\n  (seesaw.selection/selection!)\n",
   :var-type "function",
   :line 151,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "separator",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/separator",
   :doc
   "Create a separator.\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSeparator.html\n",
   :var-type "function",
   :line 2190,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets]),
   :name "show!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/show!",
   :doc
   "Show a frame, dialog or widget.\n\n If target is a modal dialog, the call will block and show! will return the\n dialog's result. See (seesaw.core/return-from-dialog).\n\n Returns its input.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/java/awt/Window.html#setVisible%28boolean%29\n",
   :var-type "function",
   :line 248,
   :file "src/seesaw/core.clj"}
  {:arglists ([panel id]),
   :name "show-card!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/show-card!",
   :doc
   "Show a particular card in a card layout. id can be a string or keyword.\n panel is returned.\n\nSee:\n\n  (seesaw.core/card-panel)\n  http://download.oracle.com/javase/6/docs/api/java/awt/CardLayout.html\n",
   :var-type "function",
   :line 996,
   :file "src/seesaw/core.clj"}
  {:arglists
   ([&
     {:keys
      [orientation
       value
       min
       max
       minor-tick-spacing
       major-tick-spacing
       snap-to-ticks?
       paint-ticks?
       paint-labels?
       paint-track?
       inverted?],
      :as kw}]),
   :name "slider",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/slider",
   :doc
   "Show a slider which can be used to modify a value.\n\n    (slider ... options ...)\n\nBesides the default options, options can also be one of:\n\n  :orientation   The orientation of the slider. One of :horizontal, :vertical.\n  :value         The initial numerical value that is to be set.\n  :min           The minimum numerical value which can be set.\n  :max           The maximum numerical value which can be set.\n  :minor-tick-spacing  The spacing between minor ticks. If set, will also set :paint-ticks? to true.\n  :major-tick-spacing  The spacing between major ticks. If set, will also set :paint-ticks? to true.\n  :snap-to-ticks?  A boolean value indicating whether the slider should snap to ticks.\n  :paint-ticks?    A boolean value indicating whether to paint ticks.\n  :paint-labels?   A boolean value indicating whether to paint labels for ticks.\n  :paint-track?    A boolean value indicating whether to paint the track.\n  :inverted?       A boolean value indicating whether to invert the slider (to go from high to low).\n\nReturns a JSlider.\n\nExamples:\n\n  ; ask & return single file\n  (slider :value 10 :min -50 :max 50)\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSlider.html",
   :var-type "function",
   :line 3202,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "spinner",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/spinner",
   :doc
   "Create a spinner (JSpinner). Additional options:\n\n  :model Instance of SpinnerModel, or one of the values described below.\n\nNote that the value can be retrieved and set with the (selection) and\n(selection!) functions. Listen to :selection to be notified of value\nchanges.\n\nThe value of model can be one of the following:\n\n  * An instance of javax.swing.SpinnerModel\n  * A java.util.Date instance in which case the spinner starts at that date,\n    is unbounded, and moves by day.\n  * A number giving the initial value for an unbounded number spinner\n  * A value returned by (seesaw.core/spinner-model)\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSpinner.html\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SpinnerModel.html\n  (seesaw.core/spinner-model)\n  test/seesaw/test/examples/spinner.clj\n",
   :var-type "function",
   :line 1888,
   :file "src/seesaw/core.clj"}
  {:arglists ([v & {:keys [from to by]}]),
   :name "spinner-model",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/spinner-model",
   :doc
   "A helper function for creating spinner models. Calls take the general\nform:\n\n    (spinner-model initial-value\n      :from start-value :to end-value :by step)\n\nValues can be one of:\n\n  * java.util.Date where step is one of :day-of-week, etc. See\n    java.util.Calendar constants.\n  * a number\n\nAny of the options beside the initial value may be omitted.\n\nNote that on some platforms the :by parameter will be ignored for date\nspinners.\n\nSee:\n  (seesaw.core/spinner)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SpinnerDateModel.html\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SpinnerNumberModel.html\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSpinner.html\n",
   :var-type "function",
   :line 1838,
   :file "src/seesaw/core.clj"}
  {:arglists ([dir left right & opts]),
   :name "splitter",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/splitter",
   :doc
   "\nCreate a new JSplitPane. This is a lower-level function. Usually you want\n(seesaw.core/top-bottom-split) or (seesaw.core/left-right-split). But here's\nthe additional options any three of these functions can take:\n\n  :divider-location The initial divider location. See (seesaw.core/divider-location!).\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSplitPane.html\n",
   :var-type "function",
   :line 2126,
   :file "src/seesaw/core.clj"}
  {:arglists ([target id start length]),
   :name "style-text!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/style-text!",
   :doc
   "Style a JTextPane\nid identifies a style that has been added to the text pane.\n\nSee:\n\n  (seesaw.core/text)\n  http://download.oracle.com/javase/tutorial/uiswing/components/editorpane.html\n",
   :var-type "function",
   :line 1509,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "styled-text",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/styled-text",
   :doc
   "Create a text pane.\nSupports the following options:\n\n  :text         text content.\n  :wrap-lines?  If true wraps lines.\n                This only works if the styled text is wrapped\n                in (seesaw.core/scrollable). Doing so will cause\n                a grey area to appear to the right of the text.\n                This can be avoided by calling\n                  (.setBackground (.getViewport s) java.awt.Color/white)\n                on the scrollable s.\n  :styles       Define styles, should be a list of vectors of form:\n                [identifier & options]\n                Where identifier is a string or keyword\n                Options supported:\n                  :font        See (seesaw.font/to-font)\n                  :size        An integer.\n                  :color       See (seesaw.color/to-color)\n                  :background  See (seesaw.color/to-color)\n                  :bold        bold if true.\n                  :italic      italic if true.\n                  :underline   underline if true.\n\nSee:\n  (seesaw.core/style-text!)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTextPane.html\n",
   :var-type "function",
   :line 1474,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "tabbed-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/tabbed-panel",
   :doc
   "Create a JTabbedPane. Supports the following properties:\n\n  :placement Tab placement, one of :bottom, :top, :left, :right.\n  :overflow  Tab overflow behavior, one of :wrap, :scroll.\n  :tabs      A list of tab descriptors. See below\n\nA tab descriptor is a map with the following properties:\n\n  :title     Title of the tab or a component to be displayed.\n  :tip       Tab's tooltip text\n  :icon      Tab's icon, passed through (icon)\n  :content   The content of the tab, passed through (make-widget) as usual.\n\nReturns the new JTabbedPane.\n\nNotes:\n\nThe currently selected tab can be retrieved with the (selection) function.\nIt returns a map similar to the tab descriptor with keys :title, :content,\nand :index.\n\nSimilarly, a tab can be programmatically selected with the\n(selection!) function, by passing one of the following values:\n\n  * A number - The index of the tab to select\n  * A string - The title of the tab to select\n  * A to-widget-able - The content of the tab to select\n  * A map as returned by (selection) with at least an :index, :title, or\n    :content key.\n\nFurthermore, you can be notified for when the active tab changes by\nlistening for the :selection event:\n\n  (listen my-tabbed-panel :selection (fn [e] ...))\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTabbedPane.html\n  (seesaw.core/selection)\n  (seesaw.core/selection!)\n",
   :var-type "function",
   :line 2416,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "table",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/table",
   :doc
   "Create a table (JTable). Additional options:\n\n  :model A TableModel, or a vector. If a vector, then it is used as\n         arguments to (seesaw.table/table-model).\n  :show-grid? Whether to show the grid lines of the table.\n  :show-horizontal-lines? Whether to show vertical grid lines\n  :show-vertical-lines?   Whether to show horizontal grid lines\n  :fills-viewport-height?\n  :auto-reseize The behavior of columns when the table is resized. One of:\n         :off                Do nothing to column widths\n         :next-column        When a column is resized, take space from next column\n         :subsequent-columns Change subsequent columns to presercve total width of table\n         :last-column        Apply adjustments to last column only\n         :all-columns        Proportionally resize all columns\n    Defaults to :subsequent-columns. If you're wondering where your horizontal scroll\n    bar is, try setting this to :off.\n\nExample:\n\n  (table\n    :model [:columns [:age :height]\n            :rows    [{:age 13 :height 45}\n                      {:age 45 :height 13}]])\n\nNotes:\n\nSee:\n  seesaw.table/table-model\n  seesaw.examples.table\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTable.html",
   :var-type "function",
   :line 1701,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "text",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/text",
   :doc
   "Create a text field or area. Given a single argument, creates a JTextField\nusing the argument as the initial text value. Otherwise, supports the\nfollowing additional properties:\n\n  :text         Initial text content\n  :multi-line?  If true, a JTextArea is created (default false)\n  :editable?    If false, the text is read-only (default true)\n  :margin\n  :caret-color          Color of caret (see seesaw.color)\n  :caret-position       Caret position as zero-based integer offset\n  :disabled-text-color  A color value\n  :selected-text-color  A color value\n  :selection-color      A color value\n\n\nThe following properties only apply if :multi-line? is false:\n\n  :columns Number of columns of text\n  :halign  Horizontal text alignment (:left, :right, :center, :leading, :trailing)\n\nThe following properties only apply if :multi-line? is true:\n\n  :wrap-lines?  If true (and :multi-line? is true) lines are wrapped.\n                (default false)\n  :tab-size     Tab size in spaces. Defaults to 8. Only applies if :multi-line?\n                is true.\n  :rows         Number of rows if :multi-line? is true (default 0).\n\nTo listen for document changes, use the :listen option:\n\n  (text :listen [:document #(... handler ...)])\n\nor attach a listener later with (listen):\n\n  (text :id :my-text ...)\n      ...\n  (listen (select root [:#my-text]) :document #(... handler ...))\n\nGiven a single widget or document (or event) argument, retrieves the\ntext of the argument. For example:\n\n    user=> (def t (text \"HI\"))\n    user=> (text t)\n    \"HI\"\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTextArea.html\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTextField.html\n",
   :var-type "function",
   :line 1344,
   :file "src/seesaw/core.clj"}
  {:arglists ([targets value]),
   :name "text!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/text!",
   :doc
   "Set the text of widget(s) or document(s). targets is an object that can be\nturned into a widget or document, or a list of such things. value is the new\ntext value to be applied. Returns targets.\n\ntarget may be one of:\n\n  A widget\n  A widget-able thing like an event\n  A Document\n  A DocumentEvent\n\nThe resulting text in the widget depends on the type of value:\n\n  A string                               - the string\n  A URL, File, or anything \"slurpable\" - the slurped value\n  Anythign else                          - (resource value)\n\nExample:\n\n    user=> (def t (text \"HI\"))\n    user=> (text! t \"BYE\")\n    user=> (text t)\n    \"BYE\"\n\n    ; Put the contents of a URL in editor\n    (text! editor (java.net.URL. \"http://google.com\"))\n\nNotes:\n\n  This applies to the :text property of new text widgets and config! as well.\n",
   :var-type "function",
   :line 1412,
   :file "src/seesaw/core.clj"}
  {:file "src/seesaw/core.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/timer",
   :namespace "seesaw.core",
   :line 109,
   :var-type "var",
   :doc
   "Alias of seesaw.timer/timer:\nCreates a new Swing timer that periodically executes the single-argument\n  function f. The argument is a \"state\" of the timer. Each time the function\n  is called its previous return value is passed to it. Kind of like (reduce)\n  but spread out over time :) The following options are supported:\n\n    :initial-value The first value passed to the handler function. Defaults to nil.\n    :initial-delay Delay, in milliseconds, of first call. Defaults to 0.\n    :delay         Delay, in milliseconds, between calls. Defaults to 1000.\n    :repeats?      If true, the timer runs forever, otherwise, it's a\n                  \"one-shot\" timer. Defaults to true.\n    :start?        Whether to start the timer immediately. Defaults to true.\n\n  See http://download.oracle.com/javase/6/docs/api/javax/swing/Timer.html\n  ",
   :name "timer"}
  {:arglists ([w]),
   :name "to-root",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/to-root",
   :doc
   "Get the frame or window that contains the given widget. Useful for APIs\nlike JDialog that want a JFrame, when all you have is a widget or event.\nNote that w is run through (to-widget) first, so you can pass event object\ndirectly to this.",
   :var-type "function",
   :line 2801,
   :file "src/seesaw/core.clj"}
  {:arglists ([v]),
   :name "to-widget",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/to-widget",
   :doc
   "Try to convert the input argument to a widget based on the following rules:\n\n  nil -> nil\n  java.awt.Component -> return argument unchanged\n  java.util.EventObject -> return the event source\n\nSee:\n  (seeseaw.to-widget)\n",
   :var-type "function",
   :line 197,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "toggle",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/toggle",
   :doc
   "Same as (seesaw.core/button), but creates a toggle button. Use :selected? option\nto set initial state.\n\nSee:\n  (seesaw.core/button)",
   :var-type "function",
   :line 1268,
   :file "src/seesaw/core.clj"}
  {:arglists ([device window] [window]),
   :name "toggle-full-screen!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/toggle-full-screen!",
   :doc "Toggle the full-screen state of the given window/frame.",
   :var-type "function",
   :line 2681,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "toolbar",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/toolbar",
   :doc
   "Create a JToolBar. The following properties are supported:\n\n  :floatable?  Whether the toolbar is floatable.\n  :orientation Toolbar orientation, :horizontal or :vertical\n  :items       Normal list of widgets to add to the toolbar. :separator\n               creates a toolbar separator.\n\nNotes:\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JToolBar.html\n",
   :var-type "function",
   :line 2369,
   :file "src/seesaw/core.clj"}
  {:arglists ([top bottom & args]),
   :name "top-bottom-split",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/top-bottom-split",
   :doc
   "Create a top/bottom (vertical) split pane with the given widgets. See\n(seesaw.core/splitter) for additional options. Options are given after\nthe two widgets.\n\nNotes:\n\nSee:\n  (seesaw.core/splitter)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JSplitPane.html\n",
   :var-type "function",
   :line 2166,
   :file "src/seesaw/core.clj"}
  {:arglists ([& args]),
   :name "tree",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/tree",
   :doc
   "Create a tree (JTree). Additional options:\n\nNotes:\n\nSee:\n\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JTree.html\n",
   :var-type "function",
   :line 1763,
   :file "src/seesaw/core.clj"}
  {:arglists ([w]),
   :name "user-data",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/user-data",
   :doc
   "Convenience function to retrieve the value of the :user-data option\npassed to the widget at construction. The widget parameter is passed\nthrough (to-widget) first so events and other objects can also be\nused.\n\nExamples:\n\n  (user-data (label :text \"HI!\" :user-data 99))\n  ;=> 99\n",
   :var-type "function",
   :line 489,
   :file "src/seesaw/core.clj"}
  {:arglists ([target]),
   :name "value",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/value",
   :doc
   "Return the 'value' of a widget. target is passed through (to-widget) as usual.\n\nBasically, there are two possibilities:\n\n  * It's a container: A map of widget values keyed by :id is built\n      recursively from all its children.\n  * The 'natural' value for the widget is returned, usually the text,\n    or the current selection of the widget.\n\nSee:\n  (seesaw.core/value!)\n  (seesaw.core/selection)\n  (seesaw.core/group-by-id)\n\nThis idea is shamelessly borrowed from Clarity https://github.com/stathissideris/clarity\n",
   :var-type "function",
   :line 3574,
   :file "src/seesaw/core.clj"}
  {:arglists ([target v]),
   :name "value!",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/value!",
   :doc
   "Set the 'value' of a widget. This is the dual of (seesaw.core/value). target\nis passed through (to-widget) as usual.\n\nBasically, there are two possibilities:\n\n  * target is a container: The value is a map of widget values keyed by :id. These\n      values are applied to all descendants of target.\n  * otherwise, v is a new 'natural' value for the widget, usually the text,\n    or the current selection of the widget.\n\nIn either case (to-widget target) is returned.\n\nExamples:\n\n  Imagine there's widget :foo, :bar, :yum in frame f:\n\n    (value! f {:foo \"new foo text\" :bar 99 :yum \"new yum text\"})\n\nSee:\n  (seesaw.core/value)\n  (seesaw.core/selection)\n  (seesaw.core/group-by-id)\n\nThis idea is shamelessly borrowed from Clarity https://github.com/stathissideris/clarity\n",
   :var-type "function",
   :line 3594,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "vertical-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/vertical-panel",
   :doc
   "Create a panel where widgets are arranged vertically Options:\n\n  :items List of widgets (passed through make-widget)\n\nSee http://download.oracle.com/javase/6/docs/api/javax/swing/BoxLayout.html\n",
   :var-type "function",
   :line 1050,
   :file "src/seesaw/core.clj"}
  {:arglists ([w]),
   :name "width",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/width",
   :doc "Returns the width of the given widget in pixels",
   :var-type "function",
   :line 462,
   :file "src/seesaw/core.clj"}
  {:arglists ([& {:keys [width height visible? size], :as opts}]),
   :name "window",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/window",
   :doc
   "Create a JWindow. NOTE: A JWindow is a top-level window with no decorations,\ni.e. no title bar, no menu, no nothin'. Usually you want (seesaw.core/frame)\nif your just showing a normal top-level app.\n\nOptions:\n\n  :id       id of the window, used by (select).\n  :width    initial width. Note that calling (pack!) will negate this setting\n  :height   initial height. Note that calling (pack!) will negate this setting\n  :size     initial size. Note that calling (pack!) will negate this setting\n  :minimum-size minimum size of frame, e.g. [640 :by 480]\n  :content  passed through (make-widget) and used as the frame's content-pane\n  :visible?  whether frame should be initially visible (default false)\n\nreturns the new window\n\nExamples:\n\n  ; Create a window, pack it and show it.\n  (-> (window :content \"I'm a label!\")\n    pack!\n    show!)\n\n  ; Create a frame with an initial size (note that pack! isn't called)\n  (show! (window :content \"I'm a label!\" :width 500 :height 600))\n\nNotes:\n  Unless :visible? is set to true, the window will not be displayed until (show!)\n  is called on it.\n\n  Call (pack!) on the frame if you'd like the window to resize itself to fit its\n  contents. Sometimes this doesn't look like crap.\n\nSee:\n  (seesaw.core/show!)\n  (seesaw.core/hide!)\n  (seesaw.core/move!)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JWindow.html\n",
   :var-type "function",
   :line 2601,
   :file "src/seesaw/core.clj"}
  {:arglists ([field handler]),
   :name "with-password*",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/with-password*",
   :doc
   "Retrieve the password of a password field and passes it to the given handler\nfunction as an array or characters. Upon completion, the array is zero'd out\nand the value returned by the handler is returned.\n\nThis is the 'safe' way to access the password. The (text) function will work too\nbut that method is discouraged, at least by the JPasswordField docs.\n\nExample:\n\n  (with-password* my-password-field\n    (fn [password-chars]\n      (... do something with chars ...)))\n\nSee:\n  (seesaw.core/password)\n  (seesaw.core/text)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/JPasswordField.html\n",
   :var-type "function",
   :line 1556,
   :file "src/seesaw/core.clj"}
  {:arglists ([widgets & body]),
   :name "with-widgets",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/with-widgets",
   :doc
   "Macro to ease construction of multiple widgets. The first argument\nis a vector of widget constructor forms, each with an :id option.\nThe name of the value of each :id is used to generate a binding in\nthe scope of the macro.\n\nExamples:\n\n  (with-widgets [(label :id :foo :text \"foo\")\n                 (button :id :bar :text \"bar\")]\n     ...)\n\n  ; is equivalent to\n  (let [foo (label :id :foo :text \"foo\")\n        bar (button :id :bar :text \"bar\")]\n     ...)\n\nNotes:\n\nIf you're looking for something like this to reduce boilerplate with\nselectors on multiple widgets, see (seesaw.core/group-by-id).\n\nSee:\n  (seesaw.core/group-by-id)\n",
   :var-type "macro",
   :line 3470,
   :file "src/seesaw/core.clj"}
  {:arglists ([& opts]),
   :name "xyz-panel",
   :namespace "seesaw.core",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.core-api.html#seesaw.core/xyz-panel",
   :doc
   "Creates a JPanel on which widgets can be positioned arbitrarily by client\ncode. No layout manager is installed.\n\nInitial widget positions can be given with their :bounds property. After\nconstruction they can be moved with the (seesaw.core/move!) function.\n\nExamples:\n\n  ; Create a panel with a label positions at (10, 10) with width 200 and height 40.\n  (xyz-panel :items [(label :text \"The Black Lodge\" :bounds [10 10 200 40]))\n\n  ; Move a widget up 50 pixels and right 25 pixels\n  (move! my-label :by [25 -50])\n\nNotes:\n\nSee:\n  (seesaw.core/move!)\n",
   :var-type "function",
   :line 915,
   :file "src/seesaw/core.clj"}
  {:arglists ([type & args]),
   :name "cursor",
   :namespace "seesaw.cursor",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.cursor-api.html#seesaw.cursor/cursor",
   :doc
   "Create a built-in or custom cursor. Take one of two forms:\n\n  (cursor :name-of-built-in-cursor)\n\nCreates a built-in cursor of the given type. Valid types are:\n\n  :crosshair :custom :default :hand :move :text :wait\n  :e-resize :n-resize :ne-resize :nw-resize \n  :s-resize :se-resize :sw-resize :w-resize\n\nTo create custom cursor:\n\n  (cursor image-or-icon optional-hotspot)\n\nwhere image-or-icon is a java.awt.Image (see seesaw.graphics/buffered-image)\nor javax.swing.ImageIcon (see seesaw.icon/icon). The hotspot is an optional\n[x y] point indicating the click point for the cursor. Defaults to [0 0].\n\nExamples:\n\n  ; The hand cursor\n  (cursor :hand)\n\n  ; Create a custom cursor from a URL:\n  (cursor (icon \"http://path/to/my/cursor.png\") [5 5])\n\nNotes:\n  This function is used implicitly by the :cursor option on most widget\n  constructor functions. So \n\n      (label :cursor (cursor :hand))\n\n  is equivalent to:\n\n      (label :cursor :hand)\n\n  Same for setting the cursor with (seesaw.core/config!).\n\n  Also, the size of a cursor is platform dependent, so some experimentation\n  will be required with creating custom cursors from images.\n\nSee:\n\n  http://download.oracle.com/javase/6/docs/api/java/awt/Cursor.html \n  http://download.oracle.com/javase/6/docs/api/java/awt/Toolkit.html#createCustomCursor%28java.awt.Image,%20java.awt.Point,%20java.lang.String%29\n",
   :var-type "function",
   :line 28,
   :file "src/seesaw/cursor.clj"}
  {:arglists ([] [f]),
   :name "debug!",
   :namespace "seesaw.dev",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dev-api.html#seesaw.dev/debug!",
   :doc
   "Install a custom exception handler which displays a window with event and\nstack trace info whenever an unhandled exception occurs in the UI thread.\nThis is usually more friendly than the console, especially in a repl.\n\nCalling with no args, enables default debugging. Otherwise, pass a two arg\nfunction that takes a java.awt.AWTEvent and a java.lang.Throwable. Passing\nnil disables debugging.\n",
   :var-type "function",
   :line 73,
   :file "src/seesaw/dev.clj"}
  {:arglists ([v]),
   :name "show-events",
   :namespace "seesaw.dev",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dev-api.html#seesaw.dev/show-events",
   :doc
   "Given a class or instance, print information about all supported events.\n From there, you can look up javadocs, etc.\n\nExamples:\n\n  (show-events javax.swing.JButton)\n  ... lots of output ...\n\n  (show-events (button))\n  ... lots of output ...\n",
   :var-type "function",
   :line 108,
   :file "src/seesaw/dev.clj"}
  {:arglists ([v]),
   :name "show-options",
   :namespace "seesaw.dev",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dev-api.html#seesaw.dev/show-options",
   :doc
   "Given an object, print information about the options it supports. These\nare all the options you can legally pass to (seesaw.core/config) and\nfriends.",
   :var-type "function",
   :line 95,
   :file "src/seesaw/dev.clj"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/Flavorful",
   :namespace "seesaw.dnd",
   :line 23,
   :var-type "var",
   :doc
   "Protocol for abstracting DataFlavor including automatic conversion from\nexternal/native representations (e.g. uri-list) to friendlier internal \nrepresentations (e.g. list of java.net.URI).",
   :name "Flavorful"}
  {:arglists ([& {:keys [import export], :as opts}]),
   :name "default-transfer-handler",
   :namespace "seesaw.dnd",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.dnd-api.html#seesaw.dnd/default-transfer-handler",
   :doc
   "Create a transfer handler for drag and drop operations. Take a list\nof key/value option pairs as usual. The following options are supported:\n\n  :import - A vector of flavor/handler pairs used when a drop/paste occurs\n            (see below)\n  :export - A map of options used when a drag/copy occurs (see below)\n\nData Import\n\n  The :import option specifies a vector of flavor/handler pairs. When\n  a drop/paste occurs, the handler for the first matching flavor is called\n  with a map with the following keys:\n\n    :target        The widget that's the target of the drop\n    :data          The data, type depends on flavor\n    :drop?         true if this is a drop operation, otherwise it's a paste\n    :drop-location Map of drop location info or nil if drop? is false. See \n                   below.\n    :support       Instance of javax.swing.TransferHandler$TransferSupport\n                   for advanced use.\n\n  The handler must return truthy if the drop is accepted, falsey otherwise.\n\n  If :drop? is true, :drop-location will be non-nil and include the following\n  keys, depending on the type of the drop target:\n\n    All types:\n\n      :point    [x y] vector\n\n    listbox \n\n      :index    The index for the drop\n      :insert?  True if it's an insert, i.e. \"between\" entries\n\n    table \n\n      :column         The column for the drop\n      :row            The row for the drop\n      :insert-column? True if it's an insert, i.e. \"between\" columns.\n      :insert-row?    True if it's an insert, i.e. \"between\" rows \n\n    tree \n\n      :index  The index of the drop point \n      :path   TreePath of the drop point\n\n    Text Components\n\n      :bias   No idea what this is\n      :index  The insertion index\n\nData Export\n\n  The :export option specifies the behavior when a drag or copy is started\n  from a widget. It is a map with the following keys:\n\n    :actions A function that takes a widget and returns a keyword indicating\n             supported actions. Defaults to :move. Can be any of :move, :copy, \n             :copy-or-move, :link, or :none.\n    :start   A function that takes a widget and returns a vector of flavor/value\n             pairs to be exported. Required.\n    :finish  A function that takes a map of values. It's called when the drag/paste\n             is completed. The map has the following keys:\n              :source The widget from which the drag started\n              :action The action, :move, :copy, or :link.\n              :data   A Transferable\n\nExamples:\n\n\n  (default-transfer-handler\n    ; Allow either strings or lists of files to be dropped\n    :import [string-flavor    (fn [{:keys [data]}] ... data is a string ...)\n             file-list-flavor (fn [{:keys [data]}] ... data is a *list* of files ...)]\n    \n    :export {\n      :actions (fn [_] :copy)\n      :start   (fn [w] [string-flavor (seesaw.core/text w)])\n      :finish  (fn [_] ... do something when drag is finished ...) })\n\nSee:\n\n  http://download.oracle.com/javase/6/docs/api/javax/swing/TransferHandler.html\n",
   :var-type "function",
   :line 173,
   :file "src/seesaw/dnd.clj"}
  {:arglists ([pairs]),
   :name "default-transferable",
   :namespace "seesaw.dnd",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/default-transferable",
   :doc
   "Constructs a transferable given a vector of alternating flavor/value pairs.\nIf a value is a function, i.e. (fn? value) is true, then then function is \ncalled with no arguments when the value is requested for its corresponding \nflavor. This way calculation of the value can be deferred until drop time. \n\nEach flavor must be unique and it's assumed that the flavor and value agree.\n\nExamples:\n\n  ; A transferable holding String or File data where the file calc is\n  ; deferred\n  (default-transferable [string-flavor    \"/home/dave\"\n                         file-list-flavor #(vector (java.io.File. \"/home/dave\"))])\n\n",
   :var-type "function",
   :line 95,
   :file "src/seesaw/dnd.clj"}
  {:arglists ([handler]),
   :name "everything-transfer-handler",
   :namespace "seesaw.dnd",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.dnd-api.html#seesaw.dnd/everything-transfer-handler",
   :doc "Handler that accepts all drops. For debugging.",
   :var-type "function",
   :line 310,
   :file "src/seesaw/dnd.clj"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/file-list-flavor",
   :namespace "seesaw.dnd",
   :line 77,
   :var-type "var",
   :doc "Flavor for a list of java.io.File objects",
   :name "file-list-flavor"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/html-flavor",
   :namespace "seesaw.dnd",
   :line 91,
   :var-type "var",
   :doc "Flavor for HTML text",
   :name "html-flavor"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/image-flavor",
   :namespace "seesaw.dnd",
   :line 92,
   :var-type "var",
   :doc "Flavor for images as java.awt.Image",
   :name "image-flavor"}
  {:arglists ([class-or-value]),
   :name "local-object-flavor",
   :namespace "seesaw.dnd",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/local-object-flavor",
   :doc
   "Creates a flavor for moving raw Java objects between components within a\nsingle JVM instance. class-or-value is either the class of data, or an\nexample value from which the class is taken.\n\nExamples:\n\n  ; Move Clojure vectors\n  (local-object-flavor [])\n",
   :var-type "function",
   :line 62,
   :file "src/seesaw/dnd.clj"}
  {:arglists ([mime-type rep-class]),
   :name "make-flavor",
   :namespace "seesaw.dnd",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/make-flavor",
   :doc
   "Construct a new data flavor with the given mime-type and representation class.\n\nNotes:\n\n  Run seesaw.dnd-explorer to experiment with flavors coming from\n  other apps.\n\nExamples:\n\n  ; HTML as a reader\n  (make-flavor \"text/html\" java.io.Reader)\n",
   :var-type "function",
   :line 43,
   :file "src/seesaw/dnd.clj"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/string-flavor",
   :namespace "seesaw.dnd",
   :line 93,
   :var-type "var",
   :doc "Flavor for raw text",
   :name "string-flavor"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/to-local",
   :namespace "seesaw.dnd",
   :var-type "function",
   :arglists ([this value]),
   :doc
   "Given an incoming value convert it to the expected local format. For example, a uri-list\nwould return a vector of URI.",
   :name "to-local"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/to-raw-flavor",
   :namespace "seesaw.dnd",
   :var-type "function",
   :arglists ([this]),
   :doc
   "Return an instance of java.awt.datatransfer.DataFlavor for this.",
   :name "to-raw-flavor"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/to-remote",
   :namespace "seesaw.dnd",
   :var-type "function",
   :arglists ([this value]),
   :doc
   "Given an outgoing value, convert it to the appropriate remote format.\nFor example, a vector of URIs would be serialized as a uri-list.",
   :name "to-remote"}
  {:file "src/seesaw/dnd.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.dnd-api.html#seesaw.dnd/uri-list-flavor",
   :namespace "seesaw.dnd",
   :line 80,
   :var-type "var",
   :doc
   "Flavor for a list of java.net.URI objects. Note it's URI, not URL.\nWith just java.net.URL it's possible to drop non-URL links, e.g. \"about:config\".",
   :name "uri-list-flavor"}
  {:arglists ([v]),
   :name "events-for",
   :namespace "seesaw.event",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.event-api.html#seesaw.event/events-for",
   :doc
   "Returns a sequence of event info maps for the given object which can\nbe either a widget instance or class.\n\nUsed by (seesaw.dev/show-events).\n\nSee:\n  (seesaw.dev/show-events)\n",
   :var-type "function",
   :line 529,
   :file "src/seesaw/event.clj"}
  {:arglists ([targets & more]),
   :name "listen",
   :namespace "seesaw.event",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.event-api.html#seesaw.event/listen",
   :doc
   "\n*note: use seesaw.core/listen rather than calling this directly*\n\nInstall listeners for one or more events on the given target. For example:\n\n  (listen (button \"foo\")\n    :mouse-entered     (fn [e] ...)\n    :focus-gained      (fn [e] ...)\n    :key-pressed       (fn [e] ...)\n    :mouse-wheel-moved (fn [e] ...))\n\none function can be registered for multiple events by using a set\nof event names instead of one:\n\n  (listen (text)\n    #{:remove-update insert-update} (fn [e] ...))\n\nNote in this case that it's smart enough to add a document listener\nto the JTextFields document.\n\nSimilarly, an event can be registered for all events in a particular swing\nlistener interface by just using the keyword-ized prefix of the interface\nname. For example, to get all callbacks in the MouseListener interface:\n\n  (listen my-widget :mouse (fn [e] ...))\n\nReturns a function which, when called, removes all listeners registered\nwith this call.\n\nWhen the target is a JTable and listener type is :selection, only\nrow selection events are reported. Also note that the source table is\n*not* retrievable from the event object.\n",
   :var-type "function",
   :line 470,
   :file "src/seesaw/event.clj"}
  {:arglists ([target property event-fn]),
   :name "listen-to-property",
   :namespace "seesaw.event",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.event-api.html#seesaw.event/listen-to-property",
   :doc
   "List to propertyChange events on a target for a particular named property.\nList (listen), returns a function that, when called removes the installed\nlistener.",
   :var-type "function",
   :line 511,
   :file "src/seesaw/event.clj"}
  {:arglists ([name]),
   :name "default-font",
   :namespace "seesaw.font",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.font-api.html#seesaw.font/default-font",
   :doc
   "Look up a default font from the UIManager.\n\nExample:\n\n  (default-font \"Label.font\")\n\nReturns an instane of java.awt.Font\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/UIManager.html#getFont%28java.lang.Object%29\n",
   :var-type "function",
   :line 89,
   :file "src/seesaw/font.clj"}
  {:arglists ([& args]),
   :name "font",
   :namespace "seesaw.font",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.font-api.html#seesaw.font/font",
   :doc
   "Create and return a Font.\n\n    (font name)\n    (font ... options ...)\n\nOptions are:\n\n  :name   The name of the font. Besides string values, also possible are \n          any of :monospaced, :serif, :sans-serif. See (seesaw.font/font-families)\n          to get a system-specific list of all valid values.\n  :style  The style. One of :bold, :plain, :italic, or a set of those values\n          to combine them. Default: :plain.\n  :size   The size of the font. Default: 12.\n  :from   A Font from which to derive the new Font.\n\n Returns a java.awt.Font instance.\n\nExamples:\n\n  ; Create a font from a font-spec (see JavaDocs)\n  (font \"ARIAL-ITALIC-20\")\n\n  ; Create a 12 pt bold and italic monospace\n  (font :style #{:bold :italic} :name :monospaced)\n\nSee:\n  (seesaw.font/font-families)\n  http://download.oracle.com/javase/6/docs/api/java/awt/Font.html\n",
   :var-type "function",
   :line 42,
   :file "src/seesaw/font.clj"}
  {:arglists ([] [locale]),
   :name "font-families",
   :namespace "seesaw.font",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.font-api.html#seesaw.font/font-families",
   :doc
   "Returns a seq of strings naming the font families on the system. These\nare the names that are valid in :name option (seesaw.font/font) as well\nas in font descriptor strings like \"Arial-BOLD-20\"\n\nSee:\n  (seesaw.core/font)\n",
   :var-type "function",
   :line 18,
   :file "src/seesaw/font.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/append",
   :namespace "seesaw.forms",
   :var-type "function",
   :arglists ([this builder]),
   :doc "Add the given component to the form builder",
   :name "append"}
  {:arglists ([column-spec & opts]),
   :name "forms-panel",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/forms-panel",
   :doc
   "Construct a panel with a FormLayout. The column spec is\nexpected to be a FormLayout column spec in string form.\n\nThe items are a list of strings, components or any of the\ncombinators. For example:\n\n    :items [\"Login\" (text) (next-line)\n            \"Password\" (span (text) 3)]\n\nTakes the following special properties. They correspond\nto the DefaultFormBuilder option of the same name.\n\n    :default-dialog-border?\n    :default-row-spec\n    :leading-column-offset\n    :line-gap-size\n    :paragraph-gap-size\n\nSee http://www.jgoodies.com/freeware/forms/index.html",
   :var-type "function",
   :line 125,
   :file "src/seesaw/forms.clj"}
  {:arglists ([& items]),
   :name "group",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/group",
   :doc "Group the rows of the contained items into a row group.",
   :var-type "function",
   :line 83,
   :file "src/seesaw/forms.clj"}
  {:arglists ([] [n]),
   :name "next-column",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/next-column",
   :doc "Continue with the nth next column in the builder.",
   :var-type "function",
   :line 53,
   :file "src/seesaw/forms.clj"}
  {:arglists ([] [n]),
   :name "next-line",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/next-line",
   :doc "Continue with the nth next line in the builder.",
   :var-type "function",
   :line 44,
   :file "src/seesaw/forms.clj"}
  {:arglists ([] [label]),
   :name "separator",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/separator",
   :doc "Adds a separator with an optional label to the form.",
   :var-type "function",
   :line 70,
   :file "src/seesaw/forms.clj"}
  {:arglists ([component column-span]),
   :name "span",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/span",
   :doc "Add the given component spanning several columns.",
   :var-type "function",
   :line 36,
   :file "src/seesaw/forms.clj"}
  {:arglists ([title]),
   :name "title",
   :namespace "seesaw.forms",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.forms-api.html#seesaw.forms/title",
   :doc "Adds the given title to the form.",
   :var-type "function",
   :line 62,
   :file "src/seesaw/forms.clj"}
  {:arglists ([g2d]),
   :name "anti-alias",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/anti-alias",
   :doc
   "Enable anti-aliasing on the given Graphics2D object.\n\nReturns g2d.",
   :var-type "function",
   :line 20,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([x y radius]),
   :name "circle",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/circle",
   :doc "Create a circle with the given center and radius",
   :var-type "function",
   :line 104,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([g2d] [g2d shape style] [g2d shape style & more]),
   :name "draw",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/draw",
   :doc
   "Draw a one or more shape/style pairs to the given graphics context.\n\nshape should be an object that implements Draw protocol (see (rect),\n(ellipse), etc.\n\nstyle is a style object created with (style). If the style's :foreground\nis non-nil, the border of the shape is drawn with the given stroke. If\nthe style's :background is non-nil, the shape is filled with that color.\n\nReturns g2d.\n",
   :var-type "function",
   :line 434,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([x y w h] [x y w]),
   :name "ellipse",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/ellipse",
   :doc "Create an ellipse that occupies the given rectangular region",
   :var-type "function",
   :line 95,
   :file "src/seesaw/graphics.clj"}
  {:arglists
   ([&
     {:keys [start end fractions colors cycle],
      :or
      {start default-start,
       end default-end,
       fractions default-fractions,
       colors default-colors,
       cycle :none},
      :as opts}]),
   :name "linear-gradient",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.graphics-api.html#seesaw.graphics/linear-gradient",
   :doc
   "Creates a linear gradient suitable for use on the :foreground and\n:background properties of a (seesaw.graphics/style), or anywhere\na java.awt.Paint is required. Has the following options:\n\n  :start The start [x y] point, defaults to [0 0]\n  :end   The end [x y] point, defaults to [1 0]\n  :fractions Sequence of fractional values indicating color transition points\n             in the gradient. Defaults to [0.0 1.0]. Must have same number\n             of entries as :colors.\n  :colors Sequence of color values correspoding to :fractions. Value is passed\n          through (seesaw.color/to-color). e.g. :blue, \"#fff\", etc.\n  :cycle The cycle behavior of the gradient, :none, :repeat, or :reflect.\n         Defaults to :none.\n\nExamples:\n\n  ; create a horizontal red, white and blue gradiant with three equal parts\n  (linear-gradient :fractions [0 0.5 1.0] :colors [:red :white :blue])\n\nSee:\n  http://docs.oracle.com/javase/6/docs/api/java/awt/LinearGradientPaint.html\n",
   :var-type "function",
   :line 201,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([& points]),
   :name "polygon",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/polygon",
   :doc
   "Create a polygonal shape with the given set of vertices.\npoints is a list of x/y pairs, e.g.:\n\n  (polygon [1 2] [3 4] [5 6])\n",
   :var-type "function",
   :line 128,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([g2d & forms]),
   :name "push",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/push",
   :doc
   "Push a Graphics2D context (Graphics2d/create) and automatically dispose it.\n\nFor example, in a paint handler:\n\n  (fn [c g2d]\n    (.setColor g2d java.awt.Color/RED)\n    (.drawString g2d \"This string is RED\" 0 20)\n    (push g2d\n      (.setColor g2d java.awt.Color/BLUE)\n      (.drawString g2d \"This string is BLUE\" 0 40))\n    (.drawString g2d \"This string is RED again\" 0 60))\n",
   :var-type "macro",
   :line 42,
   :file "src/seesaw/graphics.clj"}
  {:arglists
   ([&
     {:keys [center focus radius fractions colors cycle],
      :or
      {center default-center,
       radius default-radius,
       fractions default-fractions,
       colors default-colors,
       cycle :none},
      :as opts}]),
   :name "radial-gradient",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.graphics-api.html#seesaw.graphics/radial-gradient",
   :doc
   "Creates a radial gradient suitable for use on the :foreground and\n:background properties of a (seesaw.graphics/style), or anywhere\na java.awt.Paint is required. Has the following options:\n\n  :center The center [x y] point, defaults to [0 0]\n  :focus The focus [x y] point, defaults to :center\n  :radius   The radius. Defaults to 1.0\n  :fractions Sequence of fractional values indicating color transition points\n             in the gradient. Defaults to [0.0 1.0]. Must have same number\n             of entries as :colors.\n  :colors Sequence of color values correspoding to :fractions. Value is passed\n          through (seesaw.color/to-color). e.g. :blue, \"#fff\", etc.\n  :cycle The cycle behavior of the gradient, :none, :repeat, or :reflect.\n         Defaults to :none.\n\nExamples:\n\n  ; create a red, white and blue gradiant with three equal parts\n  (radial-gradient :radius 100.0 :fractions [0 0.5 1.0] :colors [:red :white :blue])\n\nSee:\n  http://docs.oracle.com/javase/6/docs/api/java/awt/RadialGradientPaint.html\n",
   :var-type "function",
   :line 241,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([x y w h] [x y w]),
   :name "rect",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/rect",
   :doc
   "\nCreate a rectangular shape with the given upper-left corner, width and\nheight.\n",
   :var-type "function",
   :line 67,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([g2d degrees]),
   :name "rotate",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/rotate",
   :doc
   "Apply a rotation to the graphics context by degrees\n\nReturns g2d",
   :var-type "function",
   :line 168,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([x y w h rx ry] [x y w h rx] [x y w h]),
   :name "rounded-rect",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/rounded-rect",
   :doc
   "\nCreate a rectangular shape with the given upper-left corner, width,\nheight and corner radii.\n",
   :var-type "function",
   :line 81,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([g2d sx sy] [g2d s]),
   :name "scale",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/scale",
   :doc "Apply a scale factor to the graphics context\n\nReturns g2d",
   :var-type "function",
   :line 181,
   :file "src/seesaw/graphics.clj"}
  {:arglists
   ([&
     {:keys [width cap join miter-limit dashes dash-phase],
      :or
      {width 1,
       cap :square,
       join :miter,
       miter-limit 10.0,
       dashes nil,
       dash-phase 0.0}}]),
   :name "stroke",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/stroke",
   :doc
   "Create a new stroke with the given properties:\n\n  :width Width of the stroke\n",
   :var-type "function",
   :line 295,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([& {:keys [foreground background stroke font]}]),
   :name "style",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/style",
   :doc
   "Create a new style object for use with (seesaw.graphics/draw). Takes a list\nof key/value pairs:\n\n  :foreground A color value (see seesaw.color) for the foreground (stroke)\n  :background A color value (see seesaw.color) for the background (fill)\n  :stroke     A stroke value used to draw outlines (see seesaw.graphics/stroke)\n  :font       Font value used for drawing text shapes\n\n  The default value for all properties is nil. See (seesaw.graphics/draw) for\n  interpretation of nil values.\n\nNotes:\n\n  Style objects are immutable so they can be efficiently \"pre-compiled\" and\n  used for drawing multiple shapes.\n\nExamples:\n\n  ; Red on black\n  (style :foreground :red :background :black :font :monospace)\n\n  ; Red, 8-pixel line with no fill.\n  (style :foreground :red :stroke 8)\n\nSee:\n  (seesaw.graphics/update-style)\n  (seesaw.graphics/draw)\n",
   :var-type "function",
   :line 339,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([g2d dx dy]),
   :name "translate",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/translate",
   :doc "Apply a translation to the graphics context\n\nReturns g2d",
   :var-type "function",
   :line 175,
   :file "src/seesaw/graphics.clj"}
  {:arglists
   ([s
     &
     {:keys [foreground background stroke font],
      :or
      {foreground (:foreground s),
       background (:background s),
       stroke (:stroke s),
       font (:font s)}}]),
   :name "update-style",
   :namespace "seesaw.graphics",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.graphics-api.html#seesaw.graphics/update-style",
   :doc
   "Update a style with new properties and return a new style. This is basically\nexactly the same as (clojure.core/assoc) with the exception that color, stroke,\nand font values are interpreted by Seesaw.\n\nExamples:\n\n  (def start (style :foreground blue :background :white))\n  (def no-fill (update-style start :background nil))\n  (def red-line (update-style no-fill :foreground :red))\n\nSee:\n  (seesaw.graphics/style)\n  (seesaw.graphics/draw)\n",
   :var-type "function",
   :line 375,
   :file "src/seesaw/graphics.clj"}
  {:arglists ([p]),
   :name "icon",
   :namespace "seesaw.icon",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.icon-api.html#seesaw.icon/icon",
   :doc
   "Loads an icon. The parameter p can be any of the following:\n\n  nil              - returns nil\n  javax.swing.Icon - returns the icon\n  java.awt.Image   - returns an ImageIcon around the image\n  java.net.URL     - Load the icon from the given URL\n  an i18n keyword  - Load the icon from the resource bundle\n  classpath path string  - Load the icon from the classpath\n  URL string       - Load the icon from the given URL\n  java.io.File     - Load the icon from the File\n\nThis is the function used to process the :icon property on most widgets\nand windows. Thus, any of these values may be used for the :icon property.\n",
   :var-type "function",
   :line 21,
   :file "src/seesaw/icon.clj"}
  {:arglists ([& body]),
   :name "invoke-later",
   :namespace "seesaw.invoke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.invoke-api.html#seesaw.invoke/invoke-later",
   :doc
   "Equivalent to SwingUtilities/invokeLater. Executes the given body sometime\nin the future on the Swing UI thread. For example,\n\n  (invoke-later\n    (config! my-label :text \"New Text\"))\n\nNotes:\n\n  (seesaw.core/invoke-now) is an alias of this macro.\n\nSee:\n\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable) \n",
   :var-type "macro",
   :line 30,
   :file "src/seesaw/invoke.clj"}
  {:arglists ([& body]),
   :name "invoke-now",
   :namespace "seesaw.invoke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.invoke-api.html#seesaw.invoke/invoke-now",
   :doc
   "Equivalent to SwingUtilities/invokeAndWait. Executes the given body immediately\non the Swing UI thread, possibly blocking the current thread if it's not the Swing\nUI thread. Returns the result of executing body. For example,\n\n  (invoke-now\n    (config! my-label :text \"New Text\"))\n\nNotes:\n  Be very careful with this function in the presence of locks and stuff.\n\n  (seesaw.core/invoke-now) is an alias of this macro.\n\nSee:\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#invokeAndWait(java.lang.Runnable) \n",
   :var-type "macro",
   :line 47,
   :file "src/seesaw/invoke.clj"}
  {:arglists ([& body]),
   :name "invoke-soon",
   :namespace "seesaw.invoke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.invoke-api.html#seesaw.invoke/invoke-soon",
   :doc
   "Execute code on the swing event thread (EDT) as soon as possible. That is:\n\n  * If the current thread is the EDT, executes body and returns the result\n  * Otherise, passes body to (seesaw.core/invoke-later) and returns nil\n\nNotes:\n\n  (seesaw.core/invoke-soon) is an alias of this macro.\n\nSee:\n  (seesaw.core/invoke-later)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/SwingUtilities.html#invokeLater(java.lang.Runnable) \n",
   :var-type "macro",
   :line 65,
   :file "src/seesaw/invoke.clj"}
  {:arglists ([args & body]),
   :name "signaller",
   :namespace "seesaw.invoke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.invoke-api.html#seesaw.invoke/signaller",
   :doc
   "Convenience form of (seesaw.invoke/signaller*).\n\nA use of signaller* like this:\n\n  (signaller* (fn [x y z] ... body ...))\n\ncan be written like this:\n\n  (signaller [x y z] ... body ...)\n\nSee:\n  (seesaw.invoke/signaller*)\n",
   :var-type "macro",
   :line 132,
   :file "src/seesaw/invoke.clj"}
  {:arglists ([f]),
   :name "signaller*",
   :namespace "seesaw.invoke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.invoke-api.html#seesaw.invoke/signaller*",
   :doc
   "Returns a function that conditionally queues the given function (+ args) on \nthe UI thread. The call is only queued if there is not already a pending call\nqueued. \n\nSuppose you're performing some computation in the background and want\nto signal some UI component to update. Normally you'd use (seesaw.core/invoke-later)\nbut that can easily flood the UI thread with unnecessary updates. That is,\nonly the \"last\" queued update really matters since it will overwrite any\npreceding updates when the event queue is drained. Thus, this function takes\ncare of insuring that only one update call is \"in-flight\" at any given\ntime.\n\nThe returned function returns true if the action was queued, or false if\none was already active.\n\nExamples:\n\n  ; Increment a number in a thread and signal the UI to update a label\n  ; with the current value. Without a signaller, the loop would send\n  ; updates way way way faster than the UI thread could handle them.\n  (defn counting-text-box []\n    (let [display (label :text \"0\")\n          value   (atom 0)\n          signal  (signaller* #(text! display (str @value)))]\n      (future\n        (loop []\n          (swap! value inc)\n          (signal)\n          (recur)))\n      label))\n\nNote:\n\n  You probably want to use the (seesaw.invoke/signaller) convenience\n  form.\n\nSee:\n  (seesaw.invoke/invoke-later)\n  (seesaw.invoke/signaller)\n",
   :var-type "function",
   :line 81,
   :file "src/seesaw/invoke.clj"}
  {:arglists ([target key act & {:keys [scope id], :as opts}]),
   :name "map-key",
   :namespace "seesaw.keymap",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.keymap-api.html#seesaw.keymap/map-key",
   :doc
   "Install a key mapping on a widget. \n\nKey mappings are hopelessly entwined with keyboard focus and the widget \nhierarchy. When a key is pressed in a widget with focus, each widget up\nthe hierarchy gets a chance to handle it. There three 'scopes' with\nwhich a mapping may be registered:\n\n  :self \n\n    The mapping only handles key presses when the widget itself has\n    the keyboard focus. Use this, for example, to install custom\n    key mappings in a text box.\n\n  :descendants\n\n    The mapping handles key presses when the widget itself or any\n    of its descendants has keyboard focus. \n\n  :global\n\n    The mapping handles key presses as long as the top-level window\n    containing the widget is active. This is what's used for menu\n    shortcuts and should be used for other app-wide mappings.\n\nGiven this, each mapping is installed on a particular widget along\nwith the desired keystroke and action to perform. The keystroke can\nbe any valid argument to (seesaw.keystroke/keystroke). The action\ncan be one of the following:\n\n  * A javax.swing.Action. See (seesaw.core/action)\n  * A single-argument function. An action will automatically be\n    created around it.\n  * A button, menu, menuitem, or other button-y thing. An action\n    that programmatically clicks the button will be created.\n  * nil to disable or remove a mapping \n\ntarget may be a widget, frame, or something convertible through to-widget.\n\nReturns a function that removes the key mapping.\n\nExamples:\n\n  ; In frame f, key \"K\" clicks button b\n  (map-key f \"K\" b)\n\n  ; In text box t, map ctrl+enter to a function\n  (map-key t \"control ENTER\"\n    (fn [e] (alert e \"You pressed ctrl+enter!\")))\n\nSee:\n  (seesaw.keystroke/keystroke)\n  http://download.oracle.com/javase/tutorial/uiswing/misc/keybinding.html\n",
   :var-type "function",
   :line 46,
   :file "src/seesaw/keymap.clj"}
  {:arglists ([arg]),
   :name "keystroke",
   :namespace "seesaw.keystroke",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.keystroke-api.html#seesaw.keystroke/keystroke",
   :doc
   "Convert an argument to a KeyStroke. When the argument is a string, follows \nthe keystroke descriptor syntax for KeyStroke/getKeyStroke (see link below).\n\nFor example,\n\n  (keystroke \"ctrl S\")\n\nNote that there is one additional modifier supported, \"menu\" which will\nreplace the modifier with the appropriate platform-specific modifier key for\nmenus. For example, on Windows it will be \"ctrl\", while on OSX, it will be\nthe \"command\" key. Yay!\n\narg can also be an i18n resource keyword.\n\nSee http://download.oracle.com/javase/6/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)",
   :var-type "function",
   :line 28,
   :file "src/seesaw/keystroke.clj"}
  {:arglists ([items]),
   :name "realize-grid-bag-constraints",
   :namespace "seesaw.layout",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.layout-api.html#seesaw.layout/realize-grid-bag-constraints",
   :doc
   "*INTERNAL USE ONLY. DO NOT USE.*\n\nTurn item specs into [widget constraint] pairs by successively applying\noptions to GridBagConstraints",
   :var-type "function",
   :line 240,
   :file "src/seesaw/layout.clj"}
  {:arglists ([& opts]),
   :name "mig-panel",
   :namespace "seesaw.mig",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.mig-api.html#seesaw.mig/mig-panel",
   :doc
   "Construct a panel with a MigLayout. Takes one special property:\n\n    :constraints [\"layout constraints\" \"column constraints\" \"row constraints\"]\n\nThese correspond to the three constructor arguments to MigLayout.\nA vector of 0, 1, 2, or 3 constraints can be given.\n\nThe format of the :items property is a vector of [widget, constraint] pairs.\nFor example:\n\n  :items [[ \"Propeller\"        \"split, span, gaptop 10\"]]\n\nSee:\n  http://www.miglayout.com\n  (seesaw.core/default-options)\n",
   :var-type "function",
   :line 44,
   :file "src/seesaw/mig.clj"}
  {:arglists ([e]),
   :name "button",
   :namespace "seesaw.mouse",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.mouse-api.html#seesaw.mouse/button",
   :doc
   "Return the affected button in a mouse event.\n\nReturns :left, :center, :right, or nil.",
   :var-type "function",
   :line 58,
   :file "src/seesaw/mouse.clj"}
  {:arglists ([e btn]),
   :name "button-down?",
   :namespace "seesaw.mouse",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.mouse-api.html#seesaw.mouse/button-down?",
   :doc
   "Returns true if the given button is currently down in the given mouse\nevent.\n\nExamples:\n\n  (button-down? event :left)\n",
   :var-type "function",
   :line 46,
   :file "src/seesaw/mouse.clj"}
  {:arglists ([] [v]),
   :name "location",
   :namespace "seesaw.mouse",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.mouse-api.html#seesaw.mouse/location",
   :doc
   "Returns the [x y] location of the mouse.\n\nIf given no arguments, returns full screen coordinates.\n\nIf given a MouseEvent object returns the mouse location from the event.\n\n",
   :var-type "function",
   :line 18,
   :file "src/seesaw/mouse.clj"}
  {:arglists ([name examples] [name]),
   :name "ignore-option",
   :namespace "seesaw.options",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.options-api.html#seesaw.options/ignore-option",
   :doc
   "Might be used to explicitly ignore the default behaviour of options.",
   :var-type "function",
   :line 78,
   :file "src/seesaw/options.clj"}
  {:arglists ([source-options]),
   :name "ignore-options",
   :namespace "seesaw.options",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.options-api.html#seesaw.options/ignore-options",
   :doc
   "Create a ignore-map for options, which should be ignored. Ready to\nbe merged into default option maps.",
   :var-type "function",
   :line 138,
   :file "src/seesaw/options.clj"}
  {:arglists ([& opts]),
   :name "option-map",
   :namespace "seesaw.options",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.options-api.html#seesaw.options/option-map",
   :doc "Construct an option map from a list of options.",
   :var-type "function",
   :line 155,
   :file "src/seesaw/options.clj"}
  {:arglists ([option-name keys]),
   :name "resource-option",
   :namespace "seesaw.options",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.options-api.html#seesaw.options/resource-option",
   :doc
   "Defines an option that takes a j18n namespace-qualified keyword as a\nvalue. The keyword is used as a prefix for the set of properties in\nthe given key list. This allows subsets of widget options to be configured\nfrom a resource bundle.\n\nExample:\n  ; The :resource property looks in a resource bundle for \n  ; prefix.text, prefix.foreground, etc.\n  (resource-option :resource [:text :foreground :background])\n",
   :var-type "function",
   :line 83,
   :file "src/seesaw/options.clj"}
  {:arglists ([key atom]),
   :name "bind-preference-to-atom",
   :namespace "seesaw.pref",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.pref-api.html#seesaw.pref/bind-preference-to-atom",
   :doc
   "Bind atom to preference by syncing it\nwith (java.util.prefs.Preferences/userRoot) for the current\nnamespace and a given KEY. If no preference has been set yet the\natom will stay untouched, otherwise it will be set to the stored\npreference value. Note that any value of the atom and the preference\nkey must be printable per PRINT-DUP and readable per READ-STRING for\nit to be used with the preferences store.",
   :var-type "macro",
   :line 50,
   :file "src/seesaw/pref.clj"}
  {:arglists ([ns key atom]),
   :name "bind-preference-to-atom*",
   :namespace "seesaw.pref",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.pref-api.html#seesaw.pref/bind-preference-to-atom*",
   :doc
   "Bind atom to preference by syncing it\nwith (java.util.prefs.Preferences/userRoot) for the specified\nnamespace and a given KEY. If no preference has been set yet the\natom will stay untouched, otherwise it will be set to the stored\npreference value. Note that any value of the atom and the preference\nkey must be printable per PRINT-DUP and readable per READ-STRING for\nit to be used with the preferences store.",
   :var-type "function",
   :line 31,
   :file "src/seesaw/pref.clj"}
  {:arglists ([key] [key initial-value]),
   :name "preference-atom",
   :namespace "seesaw.pref",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.pref-api.html#seesaw.pref/preference-atom",
   :doc
   "Create and return an atom which has been bound using\nbind-preference-to-atom for the current namespace.",
   :var-type "macro",
   :line 61,
   :file "src/seesaw/pref.clj"}
  {:arglists ([] [ns]),
   :name "preferences-node",
   :namespace "seesaw.pref",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.pref-api.html#seesaw.pref/preferences-node",
   :doc
   "Return the java.util.prefs.Preferences/userRoot for the current\nor the specified namespace.",
   :var-type "macro",
   :line 20,
   :file "src/seesaw/pref.clj"}
  {:arglists ([ns]),
   :name "preferences-node*",
   :namespace "seesaw.pref",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.pref-api.html#seesaw.pref/preferences-node*",
   :doc
   "Return the java.util.prefs.Preferences/userRoot for the specified\nnamespace.",
   :var-type "function",
   :line 13,
   :file "src/seesaw/pref.clj"}
  {:arglists ([w classes]),
   :name "class-of!",
   :namespace "seesaw.selector",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.selector-api.html#seesaw.selector/class-of!",
   :doc "INTERNAL USE ONLY.",
   :var-type "function",
   :line 50,
   :file "src/seesaw/selector.clj"}
  {:arglists ([w]),
   :name "id-of",
   :namespace "seesaw.selector",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.selector-api.html#seesaw.selector/id-of",
   :doc "Retrieve the id of a widget. Use (seesaw.core/id-of).",
   :var-type "function",
   :line 33,
   :file "src/seesaw/selector.clj"}
  {:arglists ([w id]),
   :name "id-of!",
   :namespace "seesaw.selector",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.selector-api.html#seesaw.selector/id-of!",
   :doc "INTERNAL USE ONLY.",
   :var-type "function",
   :line 38,
   :file "src/seesaw/selector.clj"}
  {:arglists ([node-or-nodes selector]),
   :name "select",
   :namespace "seesaw.selector",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.selector-api.html#seesaw.selector/select",
   :doc
   "*USE seesaw.core/select*\nReturns the seq of nodes or fragments matched by the specified selector.",
   :var-type "function",
   :line 357,
   :file "src/seesaw/selector.clj"}
  {:arglists ([root stylesheet]),
   :name "apply-stylesheet",
   :namespace "seesaw.style",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.style-api.html#seesaw.style/apply-stylesheet",
   :doc
   "ALPHA - EXPERIMENTAL AND GUARANTEED TO CHANGE\n\nApply a stylesheet to a widget hierarchy. A stylesheet is simple a map where\nthe keys are selectors and the values are maps from widget properties to\nvalues. For example,\n\n  (apply-stylesheet frame {\n    [:#foo]       { :text \"hi\" }\n    [:.important] { :background :red } })\n\nApplying a stylesheet is a one-time operation. It does not set up any\nkind of monitoring. Thus, if you make a change to a widget that would\naffect the rules that apply to it (say, by changing its :class) you'll\nneed to reapply the stylesheet.\n\nSee:\n  (seesaw.core/config!)\n  (seesaw.core/select)\n",
   :var-type "function",
   :line 17,
   :file "src/seesaw/style.clj"}
  {:arglists ([& args]),
   :name "busy-label",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/busy-label",
   :doc
   "Creates a org.jdesktop.swingx.JXBusyLabel which is a label that shows\n'busy' status with a spinner, kind of like an indeterminate progress bar.\nAdditional options:\n\n  :busy? Whether busy status should be shown or not. Defaults to false.\n\nExamples:\n\n  (busy-label :text \"Processing ...\"\n              :busy? true)\n\nSee:\n  (seesaw.core/label)\n  (seesaw.core/label-options)\n  (seesaw.swingx/busy-label-options)\n",
   :var-type "function",
   :line 290,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "button-x",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/button-x",
   :doc
   "Creates a org.jdesktop.swingx.JXButton which is an improved (button) that\nsupports painters. Supports these additional options:\n\n\n  :foreground-painter The foreground painter\n  :background-painter The background painter\n  :paint-border-insets? Default to true. If false painter paints entire\n      background.\n\nExamples:\n\nSee:\n  (seesaw.core/button)\n  (seesaw.core/button-options)\n  (seesaw.swingx/button-x-options)\n",
   :var-type "function",
   :line 222,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "color-selection-button",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.swingx-api.html#seesaw.swingx/color-selection-button",
   :doc
   "Creates a color selection button. In addition to normal button options,\nsupports:\n\n  :selection A color value. See (seesaw.color/to-color)\n\nThe currently selected color canbe retrieved with (seesaw.core/selection).\n\nExamples:\n\n  (def b (color-selection-button :selection :aliceblue))\n\n  (selection! b java.awt.Color/RED)\n\n  (listen b :selection\n    (fn [e]\n      (println \"Selected color changed to \")))\n\nSee:\n  (seesaw.swingx/color-selection-button-options)\n  (seesaw.color/color)\n",
   :var-type "function",
   :line 449,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "header",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/header",
   :doc
   "Creates a header which consists of a title, description (supports basic HTML)\nand an icon. Additional options:\n\n  :title The title. May be a resource.\n  :description The description. Supports basic HTML (3.2). May be a resource.\n  :icon The icon. May be a resource.\n\nExamples:\n\n  (header :title \"This is a title\"\n          :description \"<html>A <b>description</b> with some\n                        <i>italics</i></html>\"\n          :icon \"http://url/to/icon.png\")\n\nSee:\n  (seesaw.swingx/header-options)\n",
   :var-type "function",
   :line 506,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "hyperlink",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/hyperlink",
   :doc
   "Constuct an org.jdesktop.swingx.JXHyperlink which is a button that looks like\na link and opens its URI in the system browser. In addition to all the options of\na button, supports:\n\n  :uri A string, java.net.URL, or java.net.URI with the URI to open\n\nExamples:\n\n  (hyperlink :text \"Click Me\" :uri \"http://google.com\")\n\nSee:\n  (seesaw.core/button)\n  (seesaw.core/button-options)\n",
   :var-type "function",
   :line 320,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "label-x",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/label-x",
   :doc
   "Creates a org.jdesktop.swingx.JXLabel which is an improved (label) that\nsupports wrapped text, rotation, etc. Additional options:\n\n  :wrap-lines? When true, text is wrapped to fit\n  :text-rotation Rotation of text in radians\n\nExamples:\n\n  (label-x :text        \"This is really a very very very very very very long label\"\n          :wrap-lines? true\n          :rotation    (Math/toRadians 90.0))\n\nSee:\n  (seesaw.core/label)\n  (seesaw.core/label-options)\n  (seesaw.swingx/label-x-options)\n",
   :var-type "function",
   :line 257,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "listbox-x",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/listbox-x",
   :doc
   "Create a JXList which is basically an improved (seesaw.core/listbox).\nAdditional capabilities include sorting, searching, and highlighting.\nBeyond listbox, has the following additional options:\n\n  :sort-with    A comparator (like <, >, etc) used to sort the items in the\n                model.\n  :sort-order   :ascending or descending\n  :highlighters A list of highlighters\n\nBy default, ctrl/cmd-F is bound to the search function.\n\nExamples:\n\nSee:\n  (seesaw.core/listbox)\n",
   :var-type "function",
   :line 571,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "table-x",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/table-x",
   :doc
   "Create a JXTable which is basically an improved (seesaw.core/table).\nAdditional capabilities include searching, sorting and highlighting.\nBeyond table, has the following additional options:\n\n  :column-control-visible? Show column visibility control in upper right corner.\n                           Defaults to true.\n  :column-margin           Set margin between cells in pixels\n  :highlighters            A list of highlighters\n  :horizontal-scroll-enabled? Allow horizontal scrollbars. Defaults to false.\n\nBy default, ctrl/cmd-F is bound to the search function.\n\nExamples:\n\nSee:\n  (seesaw.core/table-options)\n  (seesaw.core/table)\n",
   :var-type "function",
   :line 691,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "task-pane",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/task-pane",
   :doc
   "Create a org.jdesktop.swingx.JXTaskPane which is a collapsable component with a title\nand icon. It is generally used as an item inside a task-pane-container.  Supports the\nfollowing additional options\n\n  :resource Get icon and title from a resource\n  :icon The icon\n  :title The pane's title\n  :animated? True if collapse is animated\n  :collapsed? True if the pane should be collapsed\n  :scroll-on-expand? If true, when expanded, it's container will scroll the pane into\n                     view\n  :special? If true, the pane will be displayed in a 'special' way depending on\n            look and feel\n\nThe pane can be populated with the standard :items option, which just takes a\nsequence of widgets. Additionally, the :actions option takes a sequence of\naction objects and makes hyper-links out of them.\n\nSee:\n  (seesaw.swingx/task-pane-options)\n  (seesaw.swingx/task-pane-container)\n",
   :var-type "function",
   :line 370,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "task-pane-container",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.swingx-api.html#seesaw.swingx/task-pane-container",
   :doc
   "Creates a container for task panes. Supports the following additional\noptions:\n\n  :items Sequence of task-panes to display\n\nExamples:\n\n  (task-pane-container\n    :items [(task-pane :title \"First\"\n              :actions [(action :name \"HI\")\n                        (action :name \"BYE\")])\n            (task-pane :title \"Second\"\n              :actions [(action :name \"HI\")\n                        (action :name \"BYE\")])\n            (task-pane :title \"Third\" :special? true :collapsed? true\n              :items [(button :text \"YEP\")])])\nSee:\n  (seesaw.swingx/task-pane-container-options)\n  (seesaw.swingx/task-pane)\n",
   :var-type "function",
   :line 411,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "titled-panel",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/titled-panel",
   :doc
   "Creates a panel with a title and content. Has the following properties:\n\n  :content The content widget. Passed through (seesaw.core/to-widget)\n  :title   The text of the title. May be a resource.\n  :title-color Text color. Passed through (seesaw.color/to-color). May\n           be resource.\n  :left-decoration Decoration widget on left of title.\n  :right-decoration Decoration widget on right of title.\n  :resource Set :title and :title-color from a resource bundle\n  :painter Painter used on the title\n\nExamples:\n\n  (titled-panel :title \"Error\"\n                :title-color :red\n                :content (label-x :wrap-lines? true\n                                 :text \"An error occurred!\"))\n\nSee:\n  (seesaw.core/listbox)\n",
   :var-type "function",
   :line 614,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([& args]),
   :name "tree-x",
   :namespace "seesaw.swingx",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.swingx-api.html#seesaw.swingx/tree-x",
   :doc
   "Create a JXTree which is basically an improved (seesaw.core/tree).\nAdditional capabilities include searching, and highlighting.\nBeyond tree, has the following additional options:\n\n  :highlighters A list of highlighters\n\nBy default, ctrl/cmd-F is bound to the search function.\n\nExamples:\n\nSee:\n  (seesaw.core/tree-options)\n  (seesaw.core/tree)\n",
   :var-type "function",
   :line 654,
   :file "src/seesaw/swingx.clj"}
  {:arglists ([target]),
   :name "clear!",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/clear!",
   :doc
   "Clear all rows from a table model or JTable. \n\nReturns target.\n",
   :var-type "function",
   :line 280,
   :file "src/seesaw/table.clj"}
  {:arglists ([target]),
   :name "column-count",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/column-count",
   :doc "Return number of columns in a table model or JTable.",
   :var-type "function",
   :line 294,
   :file "src/seesaw/table.clj"}
  {:arglists ([target row value] [target row value & more]),
   :name "insert-at!",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/insert-at!",
   :doc
   "Inserts one or more rows into a table. The arguments are one or more row-index/value\npairs where value is either a map or a vector with the right number of columns. Each\nrow index indicates the position before which the new row will be inserted. All indices\nare relative to the starting state of the table, i.e. they shouldn't take any shifting\nof rows that takes place during the insert. The indices *must* be in ascending sorted\norder!!\n\nReturns target.\n\nExamples:\n\n  ; Insert a row at the front of the table\n  (insert-at! 0 {:name \"Agent Cooper\" :likes \"Cherry pie and coffee\"})\n\n  ; Insert two rows, one at the front, one before row 3\n  (insert-at! 0 {:name \"Agent Cooper\" :likes \"Cherry pie and coffee\"}\n              3 {:name \"Big Ed\"       :likes \"Norma\"})\n\n",
   :var-type "function",
   :line 227,
   :file "src/seesaw/table.clj"}
  {:arglists ([target row] [target row & more]),
   :name "remove-at!",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/remove-at!",
   :doc
   "Remove one or more rows from a table or table model by index. Args are a list of row indices at\nthe start of the operation. The indices *must* be in ascending sorted order!\n\nReturns target.\n\nExamples:\n\n  ; Remove first row\n  (remove-at! t 0)\n\n  ; Remove first and third row\n  (remove-at! t 0 3)\n",
   :var-type "function",
   :line 258,
   :file "src/seesaw/table.clj"}
  {:arglists ([target]),
   :name "row-count",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/row-count",
   :doc "Return number of rows in a table model or JTable.",
   :var-type "function",
   :line 289,
   :file "src/seesaw/table.clj"}
  {:arglists ([& {:keys [columns rows], :as opts}]),
   :name "table-model",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/table-model",
   :doc
   "Creates a TableModel from column and row data. Takes two options:\n\n  :columns - a list of keys, or maps. If a key, then (name key) is used\n             as the column name. If a map, it must be in the form\n             {:key key :text text} where text is used as the column name\n             and key is use to index the row data.\n             The order establishes the order of the columns in the table.\n\n  :rows - a sequence of maps or vectors, possibly mixed. If a map, must contain\n          row data indexed by keys in :columns. Any additional keys will\n          be remembered and retrievable with (value-at). If a vector, data \n          is indexed by position in the vector.\n\nExample:\n  \n  (table-model :columns [:name \n                         {:key :age :text \"Age\"}]\n               :rows [ [\"Jim\" 65]\n                       {:age 75 :name \"Doris\"}])\n\n  This creates a two column table model with columns \"name\" and \"Age\"\n  and two rows. \n\nSee:\n  (seesaw.core/table)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/table/TableModel.html\n",
   :var-type "function",
   :line 98,
   :file "src/seesaw/table.clj"}
  {:arglists ([target row value] [target row value & more]),
   :name "update-at!",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/update-at!",
   :doc
   "Update a row in a table model or JTable. Accepts an arbitrary number of row/value\npairs where row is an integer row index and value is a map or vector of values\njust like the :rows property of (table-model).\n\nNotes:\n\n  Any non-column keys, i.e. keys that weren't present in the original column\n  spec when the table-model was constructed will be remembered and retrievable\n  later with (value-at).\n\nExamples:\n\n  ; Given a table created with column keys :a and :b, update row 3 and 5\n  (update-at! t 3 [\"Col0 Value\" \"Col1 Value\"]\n                5 { :a \"A value\" \"B value\" })\n\nSee:\n  (seesaw.core/table)\n  (seesaw.table/table-model)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/table/TableModel.html\n",
   :var-type "function",
   :line 190,
   :file "src/seesaw/table.clj"}
  {:arglists ([target rows]),
   :name "value-at",
   :namespace "seesaw.table",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.table-api.html#seesaw.table/value-at",
   :doc
   "Retrieve one or more rows from a table or table model. target is a JTable or TableModel.\nrows is either a single integer row index, or a sequence of row indices. In the first case\na single map of row values is returns. Otherwise, returns a sequence of maps.\n\nNotes:\n\nIf target was not created with (table-model), the returned map(s) are indexed\nby column name.\n\nAny non-column keys passed to (update-at!) or the initial rows of (table-model)\nare *remembered* and returned in the map.\n\nExamples:\n\n  ; Retrieve row 3\n  (value-at t 3)\n\n  ; Retrieve rows 1, 3, and 5\n  (value-at t [1 3 5])\n\n  ; Print values of selected rows\n  (listen t :selection\n    (fn [e]\n      (println (value-at t (selection {:multi? true} t)))))\nSee:\n  (seesaw.core/table)\n  (seesaw.table/table-model)\n  http://download.oracle.com/javase/6/docs/api/javax/swing/table/TableModel.html\n",
   :var-type "function",
   :line 153,
   :file "src/seesaw/table.clj"}
  {:arglists
   ([f & {:keys [start? initial-value], :or {start? true}, :as opts}]),
   :name "timer",
   :namespace "seesaw.timer",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.timer-api.html#seesaw.timer/timer",
   :doc
   "Creates a new Swing timer that periodically executes the single-argument\nfunction f. The argument is a \"state\" of the timer. Each time the function\nis called its previous return value is passed to it. Kind of like (reduce)\nbut spread out over time :) The following options are supported:\n\n  :initial-value The first value passed to the handler function. Defaults to nil.\n  :initial-delay Delay, in milliseconds, of first call. Defaults to 0.\n  :delay         Delay, in milliseconds, between calls. Defaults to 1000.\n  :repeats?      If true, the timer runs forever, otherwise, it's a\n                \"one-shot\" timer. Defaults to true.\n  :start?        Whether to start the timer immediately. Defaults to true.\n\nSee http://download.oracle.com/javase/6/docs/api/javax/swing/Timer.html\n",
   :var-type "function",
   :line 28,
   :file "src/seesaw/timer.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/fire-event*",
   :namespace "seesaw.tree",
   :var-type "function",
   :arglists ([this event-type event]),
   :doc
   "Dispatches a TreeModelEvent to all model listeners. event-type is one of\n :tree-nodes-changed, :tree-nodes-inserted, :tree-nodes-removed or\n :tree-structure-changed. Note, do not use this function directly.\nInstead use one of the helper functions in (seesaw.tree).",
   :name "fire-event*"}
  {:arglists ([tree-model node-path]),
   :name "node-changed",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/node-changed",
   :doc
   "Fire a node changed event. parent-path is the path to the parent of the\nchanged node. child is the changed node.\n\nFire this event if the appearance of a node has changed in any way.\n\nSee:\n  (seesaw.tree/nodes-changed)\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 123,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model node-path]),
   :name "node-inserted",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/node-inserted",
   :doc
   "Fire a node insertion event. parent-path is the path to the parent of the\nnewly inserted child. child is the newly inserted node.\n\nSee:\n  (seesaw.tree/nodes-inserted)\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 93,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model parent-path index child]),
   :name "node-removed",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/node-removed",
   :doc
   "Fire a node removed event on a tree model created with \n(simple-tree-model). parent-path is the path to the parent node,\nindex is the index of the removed node and child is the removed node.\n\nSee:\n  (seesaw.tree/nodes-removed)\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 60,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model node-path]),
   :name "node-structure-changed",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.tree-api.html#seesaw.tree/node-structure-changed",
   :doc
   "Fire a node structure changed event on a tree model created with \n(simple-tree-model). node-path is the sequence of nodes from the model\nroot to the node whose structure changed.\n\nCall this when the entire structure under a node has changed.\n\nSee:\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 24,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model parent-path children]),
   :name "nodes-changed",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/nodes-changed",
   :doc
   "Fire a node changed event. parent-path is the path to the parent of the\nchanged children. children is the changed nodes.\n\nFire this event if the appearance of a node has changed in any way.\n\nSee:\n  (seesaw.tree/node-changed)\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 108,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model parent-path children]),
   :name "nodes-inserted",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/nodes-inserted",
   :doc
   "Fire a node insertion event. parent-path is the path to the parent of the\nnewly inserted children. children is the newly inserted nodes.\n\nSee:\n  (seesaw.tree/node-inserted)\n  (seesaw.tree/simple-tree-model)\n",
   :var-type "function",
   :line 80,
   :file "src/seesaw/tree.clj"}
  {:arglists ([tree-model parent-path indices children]),
   :name "nodes-removed",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/nodes-removed",
   :doc
   "Fire a node removed event on a tree model created with \n(simple-tree-model). parent-path is the path to the parent node,\nindices is a seq of the indices of the removed nodes and children\nis a seq of the removed nodes.\n\nSee:\n  (seesaw.tree/simple-tree-model)\n  (seesaw.tree/node-removed)\n",
   :var-type "function",
   :line 42,
   :file "src/seesaw/tree.clj"}
  {:arglists ([branch? children root]),
   :name "simple-tree-model",
   :namespace "seesaw.tree",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.tree-api.html#seesaw.tree/simple-tree-model",
   :doc
   "Create a simple, read-only TreeModel for use with seesaw.core/tree.\n The arguments are the same as clojure.core/tree-seq. Changes to the\nunderlying model can be reported with the various node-xxx event\nfunctions in seesaw.tree.\n\nSee:\n  http://docs.oracle.com/javase/6/docs/api/javax/swing/tree/TreeModel.html\n",
   :var-type "function",
   :line 140,
   :file "src/seesaw/tree.clj"}
  {:file "src/seesaw/util.clj",
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/Children",
   :namespace "seesaw.util",
   :line 144,
   :var-type "var",
   :doc
   "A protocol for retrieving the children of a widget as a seq. \nThis takes care of idiosyncracies of frame vs. menus, etc.",
   :name "Children"}
  {:arglists ([s]),
   :name "camelize",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/camelize",
   :doc "Convert input string to camelCase from hyphen-case",
   :var-type "function",
   :line 88,
   :file "src/seesaw/util.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/children",
   :namespace "seesaw.util",
   :var-type "function",
   :arglists ([c]),
   :doc "Returns a seq of the children of the given widget",
   :name "children"}
  {:arglists ([root]),
   :name "collect",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/collect",
   :doc
   "Given a root widget or frame, returns a depth-fist seq of all the widgets\nin the hierarchy. For example to disable everything:\n\n  (config (collect (.getContentPane my-frame)) :enabled? false)\n",
   :var-type "function",
   :line 158,
   :file "src/seesaw/util.clj"}
  {:arglists ([x & forms]),
   :name "cond-doto",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/cond-doto",
   :doc
   "Spawn of (cond) and (doto). Works like (doto), but each form has a condition\n which controls whether it is executed. Returns x.\n\n(doto (new java.util.HashMap) \n  true    (.put \"a\" 1) \n  (< 2 1) (.put \"b\" 2))\n\nHere, only (.put \"a\" 1) is executed.\n",
   :var-type "macro",
   :line 33,
   :file "src/seesaw/util.clj"}
  {:arglists ([klass & fields]),
   :name "constant-map",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/constant-map",
   :doc
   "Given a class and a list of keywordized constant names returns the \n  values of those fields in a map. The name mapping upper-cases and replaces\n  hyphens with underscore, e.g.\n\n   :above-baseline --> ABOVE_BASELINE\n\n  Note that the fields must be static and declared *in* the class, not a \n  supertype.\n ",
   :var-type "function",
   :line 65,
   :file "src/seesaw/util.clj"}
  {:arglists ([fmt & args]),
   :name "illegal-argument",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/illegal-argument",
   :doc
   "Throw an illegal argument exception formatted as with (clojure.core/format)",
   :var-type "function",
   :line 16,
   :file "src/seesaw/util.clj"}
  {:arglists ([v]),
   :name "resource-key?",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/resource-key?",
   :doc
   "Returns true if v is a i18n resource key, i.e. a namespaced keyword",
   :var-type "function",
   :line 170,
   :file "src/seesaw/util.clj"}
  {:arglists ([v]),
   :name "to-mnemonic-keycode",
   :namespace "seesaw.util",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url "/seesaw.util-api.html#seesaw.util/to-mnemonic-keycode",
   :doc
   "Convert a character to integer to a mnemonic keycode. In the case of char\ninput, generates the correct keycode even if it's lower case. Input argument \ncan be:\n\n* i18n resource keyword - only first char is used\n* string - only first char is used\n* char   - lower or upper case\n* int    - key event code\n\nSee:\n  java.awt.event.KeyEvent for list of keycodes\n  http://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html",
   :var-type "function",
   :line 181,
   :file "src/seesaw/util.clj"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url
   "/seesaw.widgets.log-window-api.html#seesaw.widgets.log-window/clear",
   :namespace "seesaw.widgets.log-window",
   :var-type "function",
   :arglists ([this]),
   :doc "Clear the contents of the log-window",
   :name "clear"}
  {:file nil,
   :raw-source-url nil,
   :source-url nil,
   :wiki-url
   "/seesaw.widgets.log-window-api.html#seesaw.widgets.log-window/log",
   :namespace "seesaw.widgets.log-window",
   :var-type "function",
   :arglists ([this message]),
   :doc "Log a message to the given log-window",
   :name "log"}
  {:arglists ([& opts]),
   :name "log-window",
   :namespace "seesaw.widgets.log-window",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.widgets.log-window-api.html#seesaw.widgets.log-window/log-window",
   :doc
   "An auto-scrolling log window.\n\nThe returned widget implements the LogWindow protocol with \nwhich you can clear it, or append messages. It is thread-safe, \ni.e. messages logged from multiple threads won't be interleaved. \n\nIt must be wrapped in (seesaw.core/scrollable) for scrolling.\n\nIncludes a context menu with options for clearing the window\nand scroll lock.\n\nReturns a sub-class of javax.swing.JTextArea so any of the options\nthat apply to multi-line (seesaw.core/text) apply. Also supports\nthe following additional options:\n\n  :limit Maximum number of chars to keep in the log. When this limit\n         is reached, chars will be removed from the beginning.\n\n  :auto-scroll? Whether the window should auto-scroll. This is the\n        programmatic hook for the context menu entry.\n\nSee:\n  (seesaw.core/text)\n",
   :var-type "function",
   :line 38,
   :file "src/seesaw/widgets/log_window.clj"}
  {:arglists ([this fmt & args]),
   :name "logf",
   :namespace "seesaw.widgets.log-window",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.widgets.log-window-api.html#seesaw.widgets.log-window/logf",
   :doc "Log a formatted message to the given log-window.",
   :var-type "function",
   :line 33,
   :file "src/seesaw/widgets/log_window.clj"}
  {:arglists ([& opts]),
   :name "rounded-label",
   :namespace "seesaw.widgets.rounded-label",
   :source-url nil,
   :raw-source-url nil,
   :wiki-url
   "/seesaw.widgets.rounded-label-api.html#seesaw.widgets.rounded-label/rounded-label",
   :doc
   "Create a label whose background is a rounded rectangle\n\nSupports all the same options as (seesaw.core/label).\n\nSee:\n  (seesaw.core/label)\n",
   :var-type "function",
   :line 31,
   :file "src/seesaw/widgets/rounded_label.clj"})}
